{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to tplink-smartdevices Documentation tplink-smartdevices is a .NET standard 2.0 library for discovering and operating TP-Link Smart Devices. It allows a developer to discover and operate TP-Link Smart Devices from multiple .NET implementations such as .NET Core, Xamarin, .NET Framework and more. Ready to dive in ? Get Started Full Documentation Common Issues Changelog Supported Devices Class Supported Devices Not tested, maybe working TPLinkSmartPlug HS100 HS105, HS200 TPLinkSmartMeterPlug HS110 TPLinkSmartBulb KL100/KL110/KL130 KL50/KL60/LB100/LB110/LB120/LB130 TPLinkSmartMultiPlug HS300/HS107 KP200/KP303/KP400 TPLinkSmartDimmer HS220","title":"Home"},{"location":"#welcome-to-tplink-smartdevices-documentation","text":"tplink-smartdevices is a .NET standard 2.0 library for discovering and operating TP-Link Smart Devices. It allows a developer to discover and operate TP-Link Smart Devices from multiple .NET implementations such as .NET Core, Xamarin, .NET Framework and more.","title":"Welcome to tplink-smartdevices Documentation"},{"location":"#ready-to-dive-in","text":"Get Started Full Documentation Common Issues Changelog","title":"Ready to dive in ?"},{"location":"#supported-devices","text":"Class Supported Devices Not tested, maybe working TPLinkSmartPlug HS100 HS105, HS200 TPLinkSmartMeterPlug HS110 TPLinkSmartBulb KL100/KL110/KL130 KL50/KL60/LB100/LB110/LB120/LB130 TPLinkSmartMultiPlug HS300/HS107 KP200/KP303/KP400 TPLinkSmartDimmer HS220","title":"Supported Devices"},{"location":"about/","text":"","title":"About"},{"location":"getting-started/","text":"Getting Started Installation Use NuGet package manager to add a reference to this project .NET CLI > dotnet add package tplink-smartdevices --version 2.0.0 PackageReference < PackageReference Include = \"tplink-smartdevices\" Version = \"2.0.0\" /> Package Manager Install-Package tplink-smartdevices -Version 2.0.0 .NET Standard Be aware that this library targets .net standard, which can not be implemented from all of .net platform versions. To see whether the platform you intend to run on is supported take a look here . Supported Devices Class Supported Devices Not tested, maybe working TPLinkSmartPlug HS100 HS105 TPLinkSmartMeterPlug HS110 TPLinkSmartBulb KL100/KL110/KL130 KL50/KL60/LB100/LB110/LB120/LB130 TPLinkSmartMultiPlug HS300/HS107 KP200/KP303/KP400 TPLinkSmartDimmer HS220 Usage First Use If your devices are already connected to your Wi-Fi network (e.g through TP-Link provided mobile app Kasa) this step can be skipped. Otherwise you can use the following script to associate your smart devices with your home network: await new TPLinkDiscovery (). Associate ( \"ssid\" , \"password\" ); Full reference for TPLinkDiscovery().Associate(string, string) Caution The device running the above script needs to be connected to the network which the tplink smart devices provide. They should be called \"TP-Link_Smart Plug_XXXX\" or similar. If you have a brand new plug/bulb this network should automatically appear. Otherwise, hold down the reset button on a plug for about 10 seconds, until its light blinks amber rapidly. For a bulb flip the switch on and off 5 times. Not too quickly though! (About 1 sec per flip). Discovery Smart devices which are already connected to the same network as the host devices (PC, tablet, phone, ...) can be discovered to establish further communcation such as turning the device on/off. The discovery runs in an async Task<List<TPLinkSmartDevice>> . There is the possibility to register an event handler which triggers on each discovered device. If the ip-address of smart devices are known and not changing, an object of their associated classes can be created manually without the need for discovery. Basic var discoveredDevices = await new TPLinkDiscovery (). Discover (); Full reference for TPLinkDiscovery.Discover() With event TPLinkDiscovery discovery = new TPLinkDiscovery (); discovery . DeviceFound += delegate { ... Console . WriteLine ( $\"Device found: {e.Device.Alias}\" ); ... }; var discoveredDevices = await discovery . Discover (); Full reference for TPLinkDiscovery.DeviceFound Manual instantiation //with constructor (blocking!) var smartPlug = new TPLinkSmartPlug ( \"100.10.4.1\" ); //or with async factory method var smartBulb = await TPLinkSmartPlug . Create ( \"100.10.4.1\" ); Full reference for TPLinkSmartPlug and TPLinkSmartBulb Basic Usage Examples Following script is a basic example which describes the use-case of turning on all smart plugs in your current network: var discoveredDevices = await new TPLinkDiscovery (). Discover (); foreach ( var item in discoveredDevices ) { if ( item is TPLinkSmartPlug plug ) { await plug . SetPoweredOn ( true ); } } Full reference for TPLinkSmartPlug.SetPoweredOn(bool) Changing color of a single smart bulb (LB130, KL130): var smartBulb = await TPLinkSmartBulb . Create ( \"100.10.4.1\" ); BulbHSV red = new BulbHSV { Hue = 0 , Saturation = 100 , Value = 100 }; // red HSV(0, 100, 100) BulbHSV yellow = new BulbHSV { Hue = 60 , Saturation = 100 , Value = 100 }; // yellow HSV(60, 100, 100) //apply color (instant) smartBulb . SetHSV ( red ); //apply color with transition time smartBulb . SetHSV ( yellow , 1000 ); Full reference for TPLinkSmartBulb.SetHSV(BulbHSV, int) Remote Control If you want to control your devices remotely (not from within the same network) there is the possibility to link each device independently to your kasa account. It then shows up in your Kasa app and can be controlled over the internet from wherever it's needed. smartDevice . ConfigureRemoteAccess ( \"username\" , \"password\" ); Full reference for TPLinkSmartDevice.ConfigureRemoteAccess(string, string) Timer By setting up a Countdown Rule it is possible to have a device execute a specific action after a certain time runs out. This can for example be used to turn off all devices after half an hour: List < ICountDown > cdDevices = discoveredDevices . OfType < ICountDown >(). ToList (); cdDevices . ForEach ( d => d . AddCountDownRule ( new CountDownRule () { Delay = 1800 , Enabled = true , PoweredOn = false , Name = \"MyTimer\" } ) ); Full reference for CountDownRules Schedule Schedule your smart devices to automatically switch on or off if you are home or away, on sunrise or sunset or whenever you feel like. Example of turning light bulb on each workday at 07:00 in the morning. Schedule schedule = new Schedule { Name = \"MySchedule\" , StartAction = 1 , StartTime = new TimeSpan ( 7 , 0 , 0 ), StartTimeOption = TimeOption . Custom , Enabled = true , Weekdays = Weekdays . WorkDays }; await smartBulb . AddSchedule ( schedule ); Full reference for Schedule","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"Use NuGet package manager to add a reference to this project .NET CLI > dotnet add package tplink-smartdevices --version 2.0.0 PackageReference < PackageReference Include = \"tplink-smartdevices\" Version = \"2.0.0\" /> Package Manager Install-Package tplink-smartdevices -Version 2.0.0 .NET Standard Be aware that this library targets .net standard, which can not be implemented from all of .net platform versions. To see whether the platform you intend to run on is supported take a look here .","title":"Installation"},{"location":"getting-started/#supported-devices","text":"Class Supported Devices Not tested, maybe working TPLinkSmartPlug HS100 HS105 TPLinkSmartMeterPlug HS110 TPLinkSmartBulb KL100/KL110/KL130 KL50/KL60/LB100/LB110/LB120/LB130 TPLinkSmartMultiPlug HS300/HS107 KP200/KP303/KP400 TPLinkSmartDimmer HS220","title":"Supported Devices"},{"location":"getting-started/#usage","text":"","title":"Usage"},{"location":"getting-started/#first-use","text":"If your devices are already connected to your Wi-Fi network (e.g through TP-Link provided mobile app Kasa) this step can be skipped. Otherwise you can use the following script to associate your smart devices with your home network: await new TPLinkDiscovery (). Associate ( \"ssid\" , \"password\" ); Full reference for TPLinkDiscovery().Associate(string, string) Caution The device running the above script needs to be connected to the network which the tplink smart devices provide. They should be called \"TP-Link_Smart Plug_XXXX\" or similar. If you have a brand new plug/bulb this network should automatically appear. Otherwise, hold down the reset button on a plug for about 10 seconds, until its light blinks amber rapidly. For a bulb flip the switch on and off 5 times. Not too quickly though! (About 1 sec per flip).","title":"First Use"},{"location":"getting-started/#discovery","text":"Smart devices which are already connected to the same network as the host devices (PC, tablet, phone, ...) can be discovered to establish further communcation such as turning the device on/off. The discovery runs in an async Task<List<TPLinkSmartDevice>> . There is the possibility to register an event handler which triggers on each discovered device. If the ip-address of smart devices are known and not changing, an object of their associated classes can be created manually without the need for discovery. Basic var discoveredDevices = await new TPLinkDiscovery (). Discover (); Full reference for TPLinkDiscovery.Discover() With event TPLinkDiscovery discovery = new TPLinkDiscovery (); discovery . DeviceFound += delegate { ... Console . WriteLine ( $\"Device found: {e.Device.Alias}\" ); ... }; var discoveredDevices = await discovery . Discover (); Full reference for TPLinkDiscovery.DeviceFound Manual instantiation //with constructor (blocking!) var smartPlug = new TPLinkSmartPlug ( \"100.10.4.1\" ); //or with async factory method var smartBulb = await TPLinkSmartPlug . Create ( \"100.10.4.1\" ); Full reference for TPLinkSmartPlug and TPLinkSmartBulb","title":"Discovery"},{"location":"getting-started/#basic-usage-examples","text":"Following script is a basic example which describes the use-case of turning on all smart plugs in your current network: var discoveredDevices = await new TPLinkDiscovery (). Discover (); foreach ( var item in discoveredDevices ) { if ( item is TPLinkSmartPlug plug ) { await plug . SetPoweredOn ( true ); } } Full reference for TPLinkSmartPlug.SetPoweredOn(bool) Changing color of a single smart bulb (LB130, KL130): var smartBulb = await TPLinkSmartBulb . Create ( \"100.10.4.1\" ); BulbHSV red = new BulbHSV { Hue = 0 , Saturation = 100 , Value = 100 }; // red HSV(0, 100, 100) BulbHSV yellow = new BulbHSV { Hue = 60 , Saturation = 100 , Value = 100 }; // yellow HSV(60, 100, 100) //apply color (instant) smartBulb . SetHSV ( red ); //apply color with transition time smartBulb . SetHSV ( yellow , 1000 ); Full reference for TPLinkSmartBulb.SetHSV(BulbHSV, int)","title":"Basic Usage Examples"},{"location":"getting-started/#remote-control","text":"If you want to control your devices remotely (not from within the same network) there is the possibility to link each device independently to your kasa account. It then shows up in your Kasa app and can be controlled over the internet from wherever it's needed. smartDevice . ConfigureRemoteAccess ( \"username\" , \"password\" ); Full reference for TPLinkSmartDevice.ConfigureRemoteAccess(string, string)","title":"Remote Control"},{"location":"getting-started/#timer","text":"By setting up a Countdown Rule it is possible to have a device execute a specific action after a certain time runs out. This can for example be used to turn off all devices after half an hour: List < ICountDown > cdDevices = discoveredDevices . OfType < ICountDown >(). ToList (); cdDevices . ForEach ( d => d . AddCountDownRule ( new CountDownRule () { Delay = 1800 , Enabled = true , PoweredOn = false , Name = \"MyTimer\" } ) ); Full reference for CountDownRules","title":"Timer"},{"location":"getting-started/#schedule","text":"Schedule your smart devices to automatically switch on or off if you are home or away, on sunrise or sunset or whenever you feel like. Example of turning light bulb on each workday at 07:00 in the morning. Schedule schedule = new Schedule { Name = \"MySchedule\" , StartAction = 1 , StartTime = new TimeSpan ( 7 , 0 , 0 ), StartTimeOption = TimeOption . Custom , Enabled = true , Weekdays = Weekdays . WorkDays }; await smartBulb . AddSchedule ( schedule ); Full reference for Schedule","title":"Schedule"},{"location":"schedule/","text":"All devices implementing ISchedule can perform certain actions repeatedly on a specific time. Use Schedule to specify the options. Schedules are executed when the time of day equals StartTime as long as the schedule is Enabled . All created schedules can be accessed via the Schedules property. Schedule schedule = new Schedule { Name = \"Test1\" , StartAction = 1 , StartTime = new TimeSpan ( 13 , 1 , 0 ), StartTimeOption = TimeOption . Custom , Enabled = true , Weekdays = Weekdays . WeekendDays , }; await device . AddSchedule ( schedule ); Options Property Type Description Name string custom name of schedule, shows in kasa app Enabled bool if the schedule is currently active or not StartAction int whether to turn device on or off at start of rule. 0 = turn off, 1 = turn on StartTimeOption TimeOption TimeOption.Sunset and TimeOption.Sunrise trigger the action at, well, sunset or sunrise. Use TimeOption.Custom in conjunction with StartTime to set your own timing StartTime TimeSpan time on which the action triggers when using StartTimeOption = TimeOption.Custom e.g. 13:05 would be TimeSpan(13, 5, 0) or you can specify in minutes after midnight with TimeSpan.FromMinutes(785) Weekdays Weekdays flag of days on which the schedule is executed. Combine multiple days with bitwise or - operator Weekdays = Weekdays.Monday | Weekdays.Friday or use preset combinations like Weekdays = Weekdays.WeekendDays some more options are available, they are not well tested as of version 2.0.0 Methods Task ICountDown . RetrieveSchedules (); queries the device for current schedules and updates Schedules respectively. Task ICountDown . AddSchedule ( Schedule ); adds a new schedule Task ICountDown . EditSchedule ( Schedule ); update an existing schedule. Example: device . Schedule [ 0 ]. Weekdays |= Weekdays . Thursday ; await device . EditSchedule ( Schedule [ 0 ]); Task ICountDown . DeleteSchedule ( Schedule ); deletes an existing schedule. Example: await device . DeleteSchedule ( Schedules [ 0 ]); Task ICountDown . Schedules (); deletes all existing schedules.","title":"Schedule"},{"location":"schedule/#options","text":"Property Type Description Name string custom name of schedule, shows in kasa app Enabled bool if the schedule is currently active or not StartAction int whether to turn device on or off at start of rule. 0 = turn off, 1 = turn on StartTimeOption TimeOption TimeOption.Sunset and TimeOption.Sunrise trigger the action at, well, sunset or sunrise. Use TimeOption.Custom in conjunction with StartTime to set your own timing StartTime TimeSpan time on which the action triggers when using StartTimeOption = TimeOption.Custom e.g. 13:05 would be TimeSpan(13, 5, 0) or you can specify in minutes after midnight with TimeSpan.FromMinutes(785) Weekdays Weekdays flag of days on which the schedule is executed. Combine multiple days with bitwise or - operator Weekdays = Weekdays.Monday | Weekdays.Friday or use preset combinations like Weekdays = Weekdays.WeekendDays some more options are available, they are not well tested as of version 2.0.0","title":"Options"},{"location":"schedule/#methods","text":"Task ICountDown . RetrieveSchedules (); queries the device for current schedules and updates Schedules respectively. Task ICountDown . AddSchedule ( Schedule ); adds a new schedule Task ICountDown . EditSchedule ( Schedule ); update an existing schedule. Example: device . Schedule [ 0 ]. Weekdays |= Weekdays . Thursday ; await device . EditSchedule ( Schedule [ 0 ]); Task ICountDown . DeleteSchedule ( Schedule ); deletes an existing schedule. Example: await device . DeleteSchedule ( Schedules [ 0 ]); Task ICountDown . Schedules (); deletes all existing schedules.","title":"Methods"},{"location":"timer/","text":"All Devices implementing ICountDown can perform certain actions after a timer runs out. Use CountDownRule to specify the timer options. All timers only run once, for repeated actions create a Schedule . Currently active timers can be accessed via the CountDownRules property. var cdr = new CountDownRule () { Delay = 1800 , Enabled = true , PoweredOn = false , Name = \"MyTimer\" } await device . AddCountDownRule ( cdr ); Options Property Type Description Name string custom name of timer, shows in kasa app Enabled bool if the rule is currently active or not PoweredOn bool if the device should be powered on or off after the timer runs out Delay int delay in seconds after which the action triggers Methods Task ICountDown . RetrieveCountDownRules (); queries the device for current timers and updates CountDownRules respectively. Task ICountDown . AddCountDownRule ( CountDownRule ); adds a new rule Task ICountDown . EditCountDownRule ( CountDownRule ); update an existing rule. Example: device . CountDownRules [ 0 ]. Delay = 36000 ; await device . EditCountDownRule ( CountDownRules [ 0 ]); Task ICountDown . DeleteCountDownRule ( CountDownRule ); deletes an existing rule. Example: await device . DeleteCountDownRule ( CountDownRules [ 0 ]); Task ICountDown . DeleteAllCountDownRules (); deletes all existing rules.","title":"Timer"},{"location":"timer/#options","text":"Property Type Description Name string custom name of timer, shows in kasa app Enabled bool if the rule is currently active or not PoweredOn bool if the device should be powered on or off after the timer runs out Delay int delay in seconds after which the action triggers","title":"Options"},{"location":"timer/#methods","text":"Task ICountDown . RetrieveCountDownRules (); queries the device for current timers and updates CountDownRules respectively. Task ICountDown . AddCountDownRule ( CountDownRule ); adds a new rule Task ICountDown . EditCountDownRule ( CountDownRule ); update an existing rule. Example: device . CountDownRules [ 0 ]. Delay = 36000 ; await device . EditCountDownRule ( CountDownRules [ 0 ]); Task ICountDown . DeleteCountDownRule ( CountDownRule ); deletes an existing rule. Example: await device . DeleteCountDownRule ( CountDownRules [ 0 ]); Task ICountDown . DeleteAllCountDownRules (); deletes all existing rules.","title":"Methods"},{"location":"docs/","text":"Full API Reference Classes TPLinkSmartDevices Description TPLinkDiscovery handles discovery of new smart devices and connection of factory new devices to a network TPLinkSmartDevices.Devices Description TPLinkSmartDevice provides top-level functionalities which all smart devices use, including set up of remote access and several system information properties TPLinkSmartPlug encloses plug specific system information and plug controls TPLinkSmartMeterPlug provides data on power consumption of comsumers connected to a HS110 plug TPLinkSmartBulb encloses bulb specific system information and bulb controls TPLinkSmartMultiPlug encloses plug specific system information and controls for plugs with multiple outlets TPLinkSmartDimmer controls for wall switches with dimmer functionality TPLinkSmartDevices.Data Description BulbHSV represents a single color in the HSV color model to change a smart bulbs color PowerData Encapsulates JSON data structure for current energy use as metered by the HS110 Smart Energy Meter LightDetails Encapsulates JSON data structure for specific hardware properties of smart bulbs","title":"Full API Reference"},{"location":"docs/#full-api-reference","text":"","title":"Full API Reference"},{"location":"docs/#classes","text":"TPLinkSmartDevices Description TPLinkDiscovery handles discovery of new smart devices and connection of factory new devices to a network TPLinkSmartDevices.Devices Description TPLinkSmartDevice provides top-level functionalities which all smart devices use, including set up of remote access and several system information properties TPLinkSmartPlug encloses plug specific system information and plug controls TPLinkSmartMeterPlug provides data on power consumption of comsumers connected to a HS110 plug TPLinkSmartBulb encloses bulb specific system information and bulb controls TPLinkSmartMultiPlug encloses plug specific system information and controls for plugs with multiple outlets TPLinkSmartDimmer controls for wall switches with dimmer functionality TPLinkSmartDevices.Data Description BulbHSV represents a single color in the HSV color model to change a smart bulbs color PowerData Encapsulates JSON data structure for current energy use as metered by the HS110 Smart Energy Meter LightDetails Encapsulates JSON data structure for specific hardware properties of smart bulbs","title":"Classes"},{"location":"docs/discovery/","text":"TPLinkDiscovery Class Namespace: TPLinkSmartDevices handles discovery of new smart devices and connection of factory new devices to a network Properties DiscoveredDevices Returns a list of TPLinkSmartDevice 's from the latest call of .Discover() . This property is read-only. public List < TPLinkSmartDevice > DiscoveredDevices { get ; private set ; } Methods Discover(int, int, string) Discovers smart devices within the network of the host via UDP broadcast. Returns a list of TPLinkSmartDevice 's. public async Task < List < TPLinkSmartDevice >> Discover ( int port = 9999 , int timeout = 5000 , string target = \"255.255.255.255\" ) Parameters int port : Listen to broadcast responses on this port, defaults to 9999 int timeout : Timespan after which the discovery finishes, defaults to 5000 (5 seconds) string target : ip address of discovery broadcast, defaults to 255.255.255.255 Tip The discovery of devices within a network fails under certain circumstances. Some routers seem to block udp packets to the broadcast address (255.255.255.255), which is used to send out a discovery request. In case of using different subnet's, what seems to resolve the issue is broadcasting to the subnet's local broadcast IP (such as 192.168.0.255, if IP is 192.168.0.X with a subnet mask of 255.255.255.0) Associate(string, string, int) Makes smart device connect to specified network credentials public async Task Associate ( string ssid , string password , int type = 3 ) Parameters string ssid : Service Set Identifier (name) of network to connect to string password : password of network to connect to int type : network protection level, defaults to 3 indicating WPA2 Caution Host who runs the application needs to be connected to the open configuration network! (TP-Link_Smart Plug_XXXX or similar) Events DeviceFound Triggers when smart device is found during discovery process, granting access to all system properties of that device via the event args public event EventHandler < DeviceFoundEventArgs > DeviceFound ; EventArgs DeviceFoundEventArgs e Example new TPLinkDiscovery (). DeviceFound += ( s , e ) { ... Console . WriteLine ( $\"Device found: {e.Device.Alias}\" ); ... };","title":"TPLinkDiscovery"},{"location":"docs/discovery/#tplinkdiscovery-class","text":"Namespace: TPLinkSmartDevices handles discovery of new smart devices and connection of factory new devices to a network","title":"TPLinkDiscovery Class"},{"location":"docs/discovery/#properties","text":"","title":"Properties"},{"location":"docs/discovery/#discovereddevices","text":"Returns a list of TPLinkSmartDevice 's from the latest call of .Discover() . This property is read-only. public List < TPLinkSmartDevice > DiscoveredDevices { get ; private set ; }","title":"DiscoveredDevices"},{"location":"docs/discovery/#methods","text":"","title":"Methods"},{"location":"docs/discovery/#discover","text":"Discovers smart devices within the network of the host via UDP broadcast. Returns a list of TPLinkSmartDevice 's. public async Task < List < TPLinkSmartDevice >> Discover ( int port = 9999 , int timeout = 5000 , string target = \"255.255.255.255\" ) Parameters int port : Listen to broadcast responses on this port, defaults to 9999 int timeout : Timespan after which the discovery finishes, defaults to 5000 (5 seconds) string target : ip address of discovery broadcast, defaults to 255.255.255.255 Tip The discovery of devices within a network fails under certain circumstances. Some routers seem to block udp packets to the broadcast address (255.255.255.255), which is used to send out a discovery request. In case of using different subnet's, what seems to resolve the issue is broadcasting to the subnet's local broadcast IP (such as 192.168.0.255, if IP is 192.168.0.X with a subnet mask of 255.255.255.0)","title":"Discover(int, int, string)"},{"location":"docs/discovery/#associatestring-string-int","text":"Makes smart device connect to specified network credentials public async Task Associate ( string ssid , string password , int type = 3 ) Parameters string ssid : Service Set Identifier (name) of network to connect to string password : password of network to connect to int type : network protection level, defaults to 3 indicating WPA2 Caution Host who runs the application needs to be connected to the open configuration network! (TP-Link_Smart Plug_XXXX or similar)","title":"Associate(string, string, int)"},{"location":"docs/discovery/#events","text":"","title":"Events"},{"location":"docs/discovery/#devicefound","text":"Triggers when smart device is found during discovery process, granting access to all system properties of that device via the event args public event EventHandler < DeviceFoundEventArgs > DeviceFound ; EventArgs DeviceFoundEventArgs e Example new TPLinkDiscovery (). DeviceFound += ( s , e ) { ... Console . WriteLine ( $\"Device found: {e.Device.Alias}\" ); ... };","title":"DeviceFound"},{"location":"docs/data/hsv/","text":"BulbHSV Class Namespace: TPLinkSmartDevices.Data represents a single color in the HSV color model to change a smart bulbs color Properties Hue Angular dimension representing color, 0\u00b0/360\u00b0 red, 120\u00b0 green, 240\u00b0 blue public int Hue { get ; set ; } Saturation Resembles various tints of color. Accepts values from 0-100. public int Saturation { get ; set ; } Value Brightness of color (mixture of hue with varying amounts of black or white paint). Accepts values from 0-100. public int Value { get ; set ; }","title":"BulbHSV"},{"location":"docs/data/hsv/#bulbhsv-class","text":"Namespace: TPLinkSmartDevices.Data represents a single color in the HSV color model to change a smart bulbs color","title":"BulbHSV Class"},{"location":"docs/data/hsv/#properties","text":"","title":"Properties"},{"location":"docs/data/hsv/#hue","text":"Angular dimension representing color, 0\u00b0/360\u00b0 red, 120\u00b0 green, 240\u00b0 blue public int Hue { get ; set ; }","title":"Hue"},{"location":"docs/data/hsv/#saturation","text":"Resembles various tints of color. Accepts values from 0-100. public int Saturation { get ; set ; }","title":"Saturation"},{"location":"docs/data/hsv/#value","text":"Brightness of color (mixture of hue with varying amounts of black or white paint). Accepts values from 0-100. public int Value { get ; set ; }","title":"Value"},{"location":"docs/data/light-details/","text":"LightDetails Class Namespace: TPLinkSmartDevices.Data Encapsulates JSON data structure for specific hardware properties of smart bulbs. Properties ColorRenderingIndex Measurement of how true the color of an object looks under the bulb's light. A good CRI for most indoor residential applications is 80 or above public int ColorRenderingIndex { get ; set ; } IncandescentEquivalent bulb equals a standard incandescent bulb with this watt value public int IncandescentEquivalent { get ; set ; } LampBeamAngle Angle at which the light is distributed or emitted public int LampBeamAngle { get ; set ; } MaxLumens maximum brightness of bulb in lumens public int MaxLumens { get ; set ; } MaxVoltage maximum operating voltage public int MaxVoltage { get ; set ; } MinVoltage minimum operating voltage public int MinVoltage { get ; set ; } Wattage energy usage of bulb in watt public int Wattage { get ; set ; }","title":"LightDetails"},{"location":"docs/data/light-details/#lightdetails-class","text":"Namespace: TPLinkSmartDevices.Data Encapsulates JSON data structure for specific hardware properties of smart bulbs.","title":"LightDetails Class"},{"location":"docs/data/light-details/#properties","text":"","title":"Properties"},{"location":"docs/data/light-details/#colorrenderingindex","text":"Measurement of how true the color of an object looks under the bulb's light. A good CRI for most indoor residential applications is 80 or above public int ColorRenderingIndex { get ; set ; }","title":"ColorRenderingIndex"},{"location":"docs/data/light-details/#incandescentequivalent","text":"bulb equals a standard incandescent bulb with this watt value public int IncandescentEquivalent { get ; set ; }","title":"IncandescentEquivalent"},{"location":"docs/data/light-details/#lampbeamangle","text":"Angle at which the light is distributed or emitted public int LampBeamAngle { get ; set ; }","title":"LampBeamAngle"},{"location":"docs/data/light-details/#maxlumens","text":"maximum brightness of bulb in lumens public int MaxLumens { get ; set ; }","title":"MaxLumens"},{"location":"docs/data/light-details/#maxvoltage","text":"maximum operating voltage public int MaxVoltage { get ; set ; }","title":"MaxVoltage"},{"location":"docs/data/light-details/#minvoltage","text":"minimum operating voltage public int MinVoltage { get ; set ; }","title":"MinVoltage"},{"location":"docs/data/light-details/#wattage","text":"energy usage of bulb in watt public int Wattage { get ; set ; }","title":"Wattage"},{"location":"docs/data/power/","text":"PowerData Class Namespace: TPLinkSmartDevices.Data Encapsulates JSON data structure for current energy use as metered by the HS110 Smart Energy Meter. Properties Voltage Currently measured voltage in volts public double Voltage { get ; private set ; } Amperage Currently measured current in amperes public double Amperage { get ; private set ; } Power Currently measured power in watts public double Power { get ; private set ; } Total Total power consumption in kilowatthours public double Total { get ; private set ; }","title":"PowerData"},{"location":"docs/data/power/#powerdata-class","text":"Namespace: TPLinkSmartDevices.Data Encapsulates JSON data structure for current energy use as metered by the HS110 Smart Energy Meter.","title":"PowerData Class"},{"location":"docs/data/power/#properties","text":"","title":"Properties"},{"location":"docs/data/power/#voltage","text":"Currently measured voltage in volts public double Voltage { get ; private set ; }","title":"Voltage"},{"location":"docs/data/power/#amperage","text":"Currently measured current in amperes public double Amperage { get ; private set ; }","title":"Amperage"},{"location":"docs/data/power/#power","text":"Currently measured power in watts public double Power { get ; private set ; }","title":"Power"},{"location":"docs/data/power/#total","text":"Total power consumption in kilowatthours public double Total { get ; private set ; }","title":"Total"},{"location":"docs/devices/bulb/","text":"TPLinkSmartBulb Class Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartBulb encloses bulb specific system information and bulb controls Properties IsColor Returns whether bulb supports color changes public bool IsColor { get ; private set ; } IsDimmable Returns whether bulb supports dimming the brightness public bool IsDimmable { get ; private set ; } IsVariableColorTemperature Returns whether bulb supports changing of color temperature public bool IsVariableColorTemperature { get ; private set ; } Brightness Returns bulb brightness in percent public int Brightness { get ; private set ; } ColorTemperature Returns bulbs color temperature in kelvin public int ColorTemperature { get ; private set ; } LightDetails Contains further hardware specifications of this bulb, , see LightDetails reference public LightDetails LightDetails { get ; private set ; } HSV Returns bulb color in HSV scheme public BulbHSV HSV { get ; private set ; } PoweredOn Returns whether bulb is powered on public bool PoweredOn { get ; private set ; } PreferredLightStates Returns collection of the four light state preset configurations public List < PreferredLightState > PreferredLightStates { get ; } Constructors TPLinkSmartBulb(string, int) Creates a new object of this type, used for KL100/KL110/KL130 bulbs public TPLinkSmartBulb ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this bulb int port : bulb communicates on this port, defaults to 9999 Methods Create(string, int) Factory instantiation method. Returns a new instance of this type. public static async Task < TPLinkSmartBulb > Create ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this bulb int port : bulb communicates on this port, defaults to 9999 Refresh() Refreshes all properties of this bulb (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh () SetPoweredOn(bool) Change the power state of this bulb public async task SetPoweredOn ( bool value ) Parameters bool value : true power on, false power off SetBrightness(int, int) Change the bulbs brightness public void SetBrightness ( int brightness , int transition_period = 0 ) Parameters int brightness : brightness value in percent int transition_period (optional): time in milliseconds in which the bulb transitions from old to new brightness. Allowed values between 0 and 10000 Exceptions NotSupportedException : the bulb does not support dimming ArgumentException : transition_period only allows values between 0 and 10000 SetColorTemp(int, int) Change the bulbs color temperature public void SetColorTemp ( int colortemp , int transition_period = 0 ) Parameters int colortemp : color temperature in kelvin, common values ranging between 2700K (soft light) to 6500K (bright daylight) int transition_period (optional): time in milliseconds in which the bulb transitions from old to new brightness. Allowed values between 0 and 10000 Exceptions NotSupportedException : the bulb does not support color temperature changes ArgumentException : transition_period only allows values between 0 and 10000 Note Color temperature values depend on device model, for instance KL120 supports 2500K-5000K and KL130 2700K-9000K! SetHSV(BulbHSV, int) Change the bulbs color public void SetHSV ( BulbHSV hsv , int transition_period = 0 ) Parameters BulbHSV hsv : color in HSV color scheme, see BulbHSV reference int transition_period (optional): time in milliseconds in which the bulb transitions from old to new brightness. Allowed values between 0 and 10000 Exceptions NotSupportedException : the bulb does not support color changes ArgumentException : transition_period only allows values between 0 and 10000 Example BulbHSV red = new BulbHSV { Hue = 0 , Saturation = 100 , Value = 100 }; // red HSV(0, 100, 100) smartBulb . SetHSV ( red ); ApplyPreset(int) Operate smart bulb on one of the four light state presets public void ApplyPreset ( int presetIndex ) Parameters int presetIndex : index of the four presets, ranging from 0 to 3 Exceptions ArgumentOutOfRangeException : presetIndex only allows values between 0 and 3","title":"TPLinkSmartBulb"},{"location":"docs/devices/bulb/#tplinksmartbulb-class","text":"Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartBulb encloses bulb specific system information and bulb controls","title":"TPLinkSmartBulb Class"},{"location":"docs/devices/bulb/#properties","text":"","title":"Properties"},{"location":"docs/devices/bulb/#iscolor","text":"Returns whether bulb supports color changes public bool IsColor { get ; private set ; }","title":"IsColor"},{"location":"docs/devices/bulb/#isdimmable","text":"Returns whether bulb supports dimming the brightness public bool IsDimmable { get ; private set ; }","title":"IsDimmable"},{"location":"docs/devices/bulb/#isvariablecolortemperature","text":"Returns whether bulb supports changing of color temperature public bool IsVariableColorTemperature { get ; private set ; }","title":"IsVariableColorTemperature"},{"location":"docs/devices/bulb/#brightness","text":"Returns bulb brightness in percent public int Brightness { get ; private set ; }","title":"Brightness"},{"location":"docs/devices/bulb/#colortemperature","text":"Returns bulbs color temperature in kelvin public int ColorTemperature { get ; private set ; }","title":"ColorTemperature"},{"location":"docs/devices/bulb/#lightdetails","text":"Contains further hardware specifications of this bulb, , see LightDetails reference public LightDetails LightDetails { get ; private set ; }","title":"LightDetails"},{"location":"docs/devices/bulb/#hsv","text":"Returns bulb color in HSV scheme public BulbHSV HSV { get ; private set ; }","title":"HSV"},{"location":"docs/devices/bulb/#poweredon","text":"Returns whether bulb is powered on public bool PoweredOn { get ; private set ; }","title":"PoweredOn"},{"location":"docs/devices/bulb/#preferredlightstates","text":"Returns collection of the four light state preset configurations public List < PreferredLightState > PreferredLightStates { get ; }","title":"PreferredLightStates"},{"location":"docs/devices/bulb/#constructors","text":"","title":"Constructors"},{"location":"docs/devices/bulb/#tplinksmartbulbstring-int","text":"Creates a new object of this type, used for KL100/KL110/KL130 bulbs public TPLinkSmartBulb ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this bulb int port : bulb communicates on this port, defaults to 9999","title":"TPLinkSmartBulb(string, int)"},{"location":"docs/devices/bulb/#methods","text":"","title":"Methods"},{"location":"docs/devices/bulb/#create","text":"Factory instantiation method. Returns a new instance of this type. public static async Task < TPLinkSmartBulb > Create ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this bulb int port : bulb communicates on this port, defaults to 9999","title":"Create(string, int)"},{"location":"docs/devices/bulb/#refresh","text":"Refreshes all properties of this bulb (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh ()","title":"Refresh()"},{"location":"docs/devices/bulb/#setpoweredonbool","text":"Change the power state of this bulb public async task SetPoweredOn ( bool value ) Parameters bool value : true power on, false power off","title":"SetPoweredOn(bool)"},{"location":"docs/devices/bulb/#setbrightnessint-int","text":"Change the bulbs brightness public void SetBrightness ( int brightness , int transition_period = 0 ) Parameters int brightness : brightness value in percent int transition_period (optional): time in milliseconds in which the bulb transitions from old to new brightness. Allowed values between 0 and 10000 Exceptions NotSupportedException : the bulb does not support dimming ArgumentException : transition_period only allows values between 0 and 10000","title":"SetBrightness(int, int)"},{"location":"docs/devices/bulb/#setcolortempint-int","text":"Change the bulbs color temperature public void SetColorTemp ( int colortemp , int transition_period = 0 ) Parameters int colortemp : color temperature in kelvin, common values ranging between 2700K (soft light) to 6500K (bright daylight) int transition_period (optional): time in milliseconds in which the bulb transitions from old to new brightness. Allowed values between 0 and 10000 Exceptions NotSupportedException : the bulb does not support color temperature changes ArgumentException : transition_period only allows values between 0 and 10000 Note Color temperature values depend on device model, for instance KL120 supports 2500K-5000K and KL130 2700K-9000K!","title":"SetColorTemp(int, int)"},{"location":"docs/devices/bulb/#sethsv","text":"Change the bulbs color public void SetHSV ( BulbHSV hsv , int transition_period = 0 ) Parameters BulbHSV hsv : color in HSV color scheme, see BulbHSV reference int transition_period (optional): time in milliseconds in which the bulb transitions from old to new brightness. Allowed values between 0 and 10000 Exceptions NotSupportedException : the bulb does not support color changes ArgumentException : transition_period only allows values between 0 and 10000 Example BulbHSV red = new BulbHSV { Hue = 0 , Saturation = 100 , Value = 100 }; // red HSV(0, 100, 100) smartBulb . SetHSV ( red );","title":"SetHSV(BulbHSV, int)"},{"location":"docs/devices/bulb/#applypresetint","text":"Operate smart bulb on one of the four light state presets public void ApplyPreset ( int presetIndex ) Parameters int presetIndex : index of the four presets, ranging from 0 to 3 Exceptions ArgumentOutOfRangeException : presetIndex only allows values between 0 and 3","title":"ApplyPreset(int)"},{"location":"docs/devices/device/","text":"TPLinkSmartDevice Class Namespace: TPLinkSmartDevices.Devices provides top-level functionalities which all smart devices use, including set up of remote access and several system information properties Properties Alias Returns the user specified (or default) name of this device public string Alias { get ; private set ; } CloudServer Returns the name of the server this device communicates to for cloud commands public string CloudServer { get ; private set ; } DeviceId Returns the id of this device public string DeviceId { get ; private set ; } DevName Returns the name of this device public string DevName { get ; private set ; } FirmwareId Returns the firmware id of this device public string FirmwareId { get ; private set ; } HardwareId Returns the hardware id of this device public string HardwareId { get ; private set ; } HardwareVersion Returns the hardware version of this device public string HardwareVersion { get ; private set ; } Hostname Returns the ip-address of this device public string Hostname { get ; private set ; } LocationLatLong Returns the coordinates of the rough position the device is located at (location of network). LocationLatLong[0] is latitude, LocationLatLong[1] is longitude public double [] LocationLatLong { get ; private set ; } Caution whether you find it questionable (I do!) or not, tp-link's devices collect data on position of your network. MacAddress Returns the mac address of this device public string MacAddress { get ; private set ; } Model Returns the model and region code (EU,US,UK,JP, ...) of this device public string Model { get ; private set ; } OemId Returns the manufacturers id of this device public string OemId { get ; private set ; } Port Returns the port this device communicates on public int Port { get ; private set ; } RemoteAccessEnabled Returns whether this device is configured for remote access via Kasa app public bool RemoteAccessEnabled { get ; private set ; } RSSI Returns signal strength public int RSSI { get ; private set ; } Type public string Type { get ; private set ; } Methods ConfigureRemoteAccess(string, string) Binds account with the specified credentials to tp-link's cloud server public async Task ConfigureRemoteAccess ( string username , string password ) Parameters string username : username (e-mail address) of kasa account string password : password of kasa account UnbindRemoteAccess() Unbinds currently connected account from tp-link's cloud server public void UnbindRemoteAccess () GetCloudInfo() Refreshes cloud information and sets RemoteAccessEnabled and CloudServer properties accordingly public void GetCloudInfo () GetTime() Returns current internal time of this device public DateTime GetTime () Needs Maintenance This method needs maintenance. It is discouraged using it due to unexpected results or errors occurring Refresh(dynamic) Refreshes all properties of this device (includes a call to GetCloudInfo() ) public async Task Refresh ( dynamic sysInfo = null ) Parameters dynamic sysInfo : response of smart devices on system properties, defaults to null which results in a new request being made SetAlias(string) Sets alias of this device public void SetAlias ( string value ) Parameters string value : new alias to set","title":"TPLinkSmartDevice"},{"location":"docs/devices/device/#tplinksmartdevice-class","text":"Namespace: TPLinkSmartDevices.Devices provides top-level functionalities which all smart devices use, including set up of remote access and several system information properties","title":"TPLinkSmartDevice Class"},{"location":"docs/devices/device/#properties","text":"","title":"Properties"},{"location":"docs/devices/device/#alias","text":"Returns the user specified (or default) name of this device public string Alias { get ; private set ; }","title":"Alias"},{"location":"docs/devices/device/#cloudserver","text":"Returns the name of the server this device communicates to for cloud commands public string CloudServer { get ; private set ; }","title":"CloudServer"},{"location":"docs/devices/device/#deviceid","text":"Returns the id of this device public string DeviceId { get ; private set ; }","title":"DeviceId"},{"location":"docs/devices/device/#devname","text":"Returns the name of this device public string DevName { get ; private set ; }","title":"DevName"},{"location":"docs/devices/device/#firmwareid","text":"Returns the firmware id of this device public string FirmwareId { get ; private set ; }","title":"FirmwareId"},{"location":"docs/devices/device/#hardwareid","text":"Returns the hardware id of this device public string HardwareId { get ; private set ; }","title":"HardwareId"},{"location":"docs/devices/device/#hardwareversion","text":"Returns the hardware version of this device public string HardwareVersion { get ; private set ; }","title":"HardwareVersion"},{"location":"docs/devices/device/#hostname","text":"Returns the ip-address of this device public string Hostname { get ; private set ; }","title":"Hostname"},{"location":"docs/devices/device/#locationlatlong","text":"Returns the coordinates of the rough position the device is located at (location of network). LocationLatLong[0] is latitude, LocationLatLong[1] is longitude public double [] LocationLatLong { get ; private set ; } Caution whether you find it questionable (I do!) or not, tp-link's devices collect data on position of your network.","title":"LocationLatLong"},{"location":"docs/devices/device/#macaddress","text":"Returns the mac address of this device public string MacAddress { get ; private set ; }","title":"MacAddress"},{"location":"docs/devices/device/#model","text":"Returns the model and region code (EU,US,UK,JP, ...) of this device public string Model { get ; private set ; }","title":"Model"},{"location":"docs/devices/device/#oemid","text":"Returns the manufacturers id of this device public string OemId { get ; private set ; }","title":"OemId"},{"location":"docs/devices/device/#port","text":"Returns the port this device communicates on public int Port { get ; private set ; }","title":"Port"},{"location":"docs/devices/device/#remoteaccessenabled","text":"Returns whether this device is configured for remote access via Kasa app public bool RemoteAccessEnabled { get ; private set ; }","title":"RemoteAccessEnabled"},{"location":"docs/devices/device/#rssi","text":"Returns signal strength public int RSSI { get ; private set ; }","title":"RSSI"},{"location":"docs/devices/device/#type","text":"public string Type { get ; private set ; }","title":"Type"},{"location":"docs/devices/device/#methods","text":"","title":"Methods"},{"location":"docs/devices/device/#configureremoteaccessstring-string","text":"Binds account with the specified credentials to tp-link's cloud server public async Task ConfigureRemoteAccess ( string username , string password ) Parameters string username : username (e-mail address) of kasa account string password : password of kasa account","title":"ConfigureRemoteAccess(string, string)"},{"location":"docs/devices/device/#unbindremoteaccess","text":"Unbinds currently connected account from tp-link's cloud server public void UnbindRemoteAccess ()","title":"UnbindRemoteAccess()"},{"location":"docs/devices/device/#getcloudinfo","text":"Refreshes cloud information and sets RemoteAccessEnabled and CloudServer properties accordingly public void GetCloudInfo ()","title":"GetCloudInfo()"},{"location":"docs/devices/device/#gettime","text":"Returns current internal time of this device public DateTime GetTime () Needs Maintenance This method needs maintenance. It is discouraged using it due to unexpected results or errors occurring","title":"GetTime()"},{"location":"docs/devices/device/#refreshdynamic","text":"Refreshes all properties of this device (includes a call to GetCloudInfo() ) public async Task Refresh ( dynamic sysInfo = null ) Parameters dynamic sysInfo : response of smart devices on system properties, defaults to null which results in a new request being made","title":"Refresh(dynamic)"},{"location":"docs/devices/device/#setaliasstring","text":"Sets alias of this device public void SetAlias ( string value ) Parameters string value : new alias to set","title":"SetAlias(string)"},{"location":"docs/devices/dimmer/","text":"TPLinkSmartDimmmer Class Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartDimmer controls for wall switches with dimmer functionality Properties Brightness Returns brightness (dimmer value) in percent public int Brightness { get ; private set ; } Options Returns an object of type DimmerOptions with configuration properties public DimmerOptions Options { get ; private set ; } Presets Returns array of the four dimmer state preset configurations containing brightness values public int [] Presets { get ; private set ; } PoweredOn Returns whether switch is powered on public bool PoweredOn { get ; private set ; } Constructors TPLinkSmartPlug(string, int, DimmerOptions) Creates a new object of this type, used for HS220 wall switch public TPLinkSmartPlug ( string hostname , int port = 9999 , DimmerOptions opts = null ) Parameters string hostname : ip-address of this device int port : device communicates on this port, defaults to 9999 DimmerOptions opts : configuration properties` Methods Create(string, int, DimmerOptions) Factory instantiation method. Returns a new instance of this type. public static async Task < TPLinkSmartPlug > Create ( string hostname , int port = 9999 , DimmerOptions opts = null ) Parameters string hostname : ip-address of this device int port : device communicates on this port, defaults to 9999 DimmerOptions opts : configuration properties` Refresh() Refreshes all properties of this device (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh () SetPoweredOn(bool) Change the power state public void SetPoweredOn ( bool value ) Parameters bool value : true power on, false power off TransitionBrightness(int, DimmerMode, int) Transition to a specified brightness level public async Task TransitionBrightness ( int brightness , DimmerMode ? mode = null , int? duration = null ) Parameters int brightness : dimmer brightness value in percent DimmerMode mode (optional): DimmerMode to use during this transition, if left empty uses default option from Options.Mode int duration (optional): time in milliseconds in which the bulb transitions from old to new brightness Exceptions ArgumentException : brightness should be between 0 and 100 SetBrightness(int) Instantly change to a specified brightness level public async Task SetBrightness ( int brightness ) Parameters int brightness : dimmer brightness value in percent Exceptions ArgumentException : brightness should be between 0 and 100 SetDoubleClickAction(DimmerMode, int) Configures change mode on double click of switch public async Task SetDoubleClickAction ( DimmerMode mode , int index = 0 ) Parameters DimmerMode mode : DimmerMode to use on double clicking the switch int index (optional): zero-based preset index, use in combination with DimmerMode.Preset to execute preset on double click Exceptions ArgumentException : index should be between 0 and 3 SetLongPressAction(DimmerMode, int) Configures change mode on long press of switch public async Task SetLongPressAction ( DimmerMode mode , int index = 0 ) Parameters DimmerMode mode : DimmerMode to use on long press of switch int index (optional): zero-based preset index, use in combination with DimmerMode.Preset to execute preset on long press Exceptions ArgumentException : index should be between 0 and 3 SetFadeOnTime(int) Configures speed of fade on transition public async Task SetFadeOnTime ( int fadeOnTime ) Parameters int fadeOnTime : transition time used on next uses of switch when turning on Exceptions ArgumentException : fadeOnTime should be a positive number SetFadeOffTime(int) Configures speed of fade on transition public async Task SetFadeOffTime ( int fadeOffTime ) Parameters int fadeOffTime : transition time used on next uses of switch when turning off Exceptions ArgumentException : fadeOffTime should be a positive number","title":"TPLinkSmartDimmer"},{"location":"docs/devices/dimmer/#tplinksmartdimmmer-class","text":"Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartDimmer controls for wall switches with dimmer functionality","title":"TPLinkSmartDimmmer Class"},{"location":"docs/devices/dimmer/#properties","text":"","title":"Properties"},{"location":"docs/devices/dimmer/#brightness","text":"Returns brightness (dimmer value) in percent public int Brightness { get ; private set ; }","title":"Brightness"},{"location":"docs/devices/dimmer/#options","text":"Returns an object of type DimmerOptions with configuration properties public DimmerOptions Options { get ; private set ; }","title":"Options"},{"location":"docs/devices/dimmer/#presets","text":"Returns array of the four dimmer state preset configurations containing brightness values public int [] Presets { get ; private set ; }","title":"Presets"},{"location":"docs/devices/dimmer/#poweredon","text":"Returns whether switch is powered on public bool PoweredOn { get ; private set ; }","title":"PoweredOn"},{"location":"docs/devices/dimmer/#constructors","text":"","title":"Constructors"},{"location":"docs/devices/dimmer/#tplinksmartplugstring-int-dimmeroptions","text":"Creates a new object of this type, used for HS220 wall switch public TPLinkSmartPlug ( string hostname , int port = 9999 , DimmerOptions opts = null ) Parameters string hostname : ip-address of this device int port : device communicates on this port, defaults to 9999 DimmerOptions opts : configuration properties`","title":"TPLinkSmartPlug(string, int, DimmerOptions)"},{"location":"docs/devices/dimmer/#methods","text":"","title":"Methods"},{"location":"docs/devices/dimmer/#create","text":"Factory instantiation method. Returns a new instance of this type. public static async Task < TPLinkSmartPlug > Create ( string hostname , int port = 9999 , DimmerOptions opts = null ) Parameters string hostname : ip-address of this device int port : device communicates on this port, defaults to 9999 DimmerOptions opts : configuration properties`","title":"Create(string, int, DimmerOptions)"},{"location":"docs/devices/dimmer/#refresh","text":"Refreshes all properties of this device (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh ()","title":"Refresh()"},{"location":"docs/devices/dimmer/#setpoweredonbool","text":"Change the power state public void SetPoweredOn ( bool value ) Parameters bool value : true power on, false power off","title":"SetPoweredOn(bool)"},{"location":"docs/devices/dimmer/#transitionbrightnessint-dimmermode-int","text":"Transition to a specified brightness level public async Task TransitionBrightness ( int brightness , DimmerMode ? mode = null , int? duration = null ) Parameters int brightness : dimmer brightness value in percent DimmerMode mode (optional): DimmerMode to use during this transition, if left empty uses default option from Options.Mode int duration (optional): time in milliseconds in which the bulb transitions from old to new brightness Exceptions ArgumentException : brightness should be between 0 and 100","title":"TransitionBrightness(int, DimmerMode, int)"},{"location":"docs/devices/dimmer/#setbrightnessint","text":"Instantly change to a specified brightness level public async Task SetBrightness ( int brightness ) Parameters int brightness : dimmer brightness value in percent Exceptions ArgumentException : brightness should be between 0 and 100","title":"SetBrightness(int)"},{"location":"docs/devices/dimmer/#setdoubleclickactiondimmermode-int","text":"Configures change mode on double click of switch public async Task SetDoubleClickAction ( DimmerMode mode , int index = 0 ) Parameters DimmerMode mode : DimmerMode to use on double clicking the switch int index (optional): zero-based preset index, use in combination with DimmerMode.Preset to execute preset on double click Exceptions ArgumentException : index should be between 0 and 3","title":"SetDoubleClickAction(DimmerMode, int)"},{"location":"docs/devices/dimmer/#setlongpressactiondimmermode-int","text":"Configures change mode on long press of switch public async Task SetLongPressAction ( DimmerMode mode , int index = 0 ) Parameters DimmerMode mode : DimmerMode to use on long press of switch int index (optional): zero-based preset index, use in combination with DimmerMode.Preset to execute preset on long press Exceptions ArgumentException : index should be between 0 and 3","title":"SetLongPressAction(DimmerMode, int)"},{"location":"docs/devices/dimmer/#setfadeontimeint","text":"Configures speed of fade on transition public async Task SetFadeOnTime ( int fadeOnTime ) Parameters int fadeOnTime : transition time used on next uses of switch when turning on Exceptions ArgumentException : fadeOnTime should be a positive number","title":"SetFadeOnTime(int)"},{"location":"docs/devices/dimmer/#setfadeofftimeint","text":"Configures speed of fade on transition public async Task SetFadeOffTime ( int fadeOffTime ) Parameters int fadeOffTime : transition time used on next uses of switch when turning off Exceptions ArgumentException : fadeOffTime should be a positive number","title":"SetFadeOffTime(int)"},{"location":"docs/devices/multi-plug/","text":"TPLinkSmartMultiPlug Class Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartMultiPlug encloses plug specific system information and controls for plugs with multiple outlets Properties AllOutletsPowered Returns whether all the plugs outlet relais are powered on public bool AllOutletsPowered { get ; private set ; } Features Returns the feature (capability) abbreviations for this plug public string [] Features { get ; private set ; } LedOn If status led on smart plug is on public bool LedOn { get ; private set ; } OutletCount Returns number of outlets on this plug public int OutletCount { get ; private set ; } Outlets Returns array of Outlets, containing id's, names and power states of each outlet public Outlet [] Outlets { get ; private set ; } Constructors TPLinkSmartMultiPlug(string, int) Creates a new object of this type, used for HS300/HS107 plug public TPLinkSmartPlug ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this plug int port : plug communicates on this port, defaults to 9999 Methods Refresh() Refreshes all properties of this plug (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh () SetOutletPowered(bool, int) Change the plugs outlet relay state public void SetOutletPowered ( bool value , int outledId = - 1 ) Parameters bool value : true power on, false power off int outledId : id of outlet to turn on/off (zero-based index of all outlets) Exceptions ArgumentException : plug does not have a outlet with specified outledId SetLedOn(bool) Change the plugs LED state; branded as night mode by tp-link :) public void SetLedOn ( bool value ) Parameters bool value : true LED on (day mode), false LED off (night mode)","title":"TPLinkSmartMultiPlug"},{"location":"docs/devices/multi-plug/#tplinksmartmultiplug-class","text":"Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartMultiPlug encloses plug specific system information and controls for plugs with multiple outlets","title":"TPLinkSmartMultiPlug Class"},{"location":"docs/devices/multi-plug/#properties","text":"","title":"Properties"},{"location":"docs/devices/multi-plug/#alloutletspowered","text":"Returns whether all the plugs outlet relais are powered on public bool AllOutletsPowered { get ; private set ; }","title":"AllOutletsPowered"},{"location":"docs/devices/multi-plug/#features","text":"Returns the feature (capability) abbreviations for this plug public string [] Features { get ; private set ; }","title":"Features"},{"location":"docs/devices/multi-plug/#ledon","text":"If status led on smart plug is on public bool LedOn { get ; private set ; }","title":"LedOn"},{"location":"docs/devices/multi-plug/#outletcount","text":"Returns number of outlets on this plug public int OutletCount { get ; private set ; }","title":"OutletCount"},{"location":"docs/devices/multi-plug/#outlets","text":"Returns array of Outlets, containing id's, names and power states of each outlet public Outlet [] Outlets { get ; private set ; }","title":"Outlets"},{"location":"docs/devices/multi-plug/#constructors","text":"","title":"Constructors"},{"location":"docs/devices/multi-plug/#tplinksmartmultiplugstring-int","text":"Creates a new object of this type, used for HS300/HS107 plug public TPLinkSmartPlug ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this plug int port : plug communicates on this port, defaults to 9999","title":"TPLinkSmartMultiPlug(string, int)"},{"location":"docs/devices/multi-plug/#methods","text":"","title":"Methods"},{"location":"docs/devices/multi-plug/#refresh","text":"Refreshes all properties of this plug (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh ()","title":"Refresh()"},{"location":"docs/devices/multi-plug/#setoutletpoweredbool-int","text":"Change the plugs outlet relay state public void SetOutletPowered ( bool value , int outledId = - 1 ) Parameters bool value : true power on, false power off int outledId : id of outlet to turn on/off (zero-based index of all outlets) Exceptions ArgumentException : plug does not have a outlet with specified outledId","title":"SetOutletPowered(bool, int)"},{"location":"docs/devices/multi-plug/#setledonbool","text":"Change the plugs LED state; branded as night mode by tp-link :) public void SetLedOn ( bool value ) Parameters bool value : true LED on (day mode), false LED off (night mode)","title":"SetLedOn(bool)"},{"location":"docs/devices/plug/","text":"TPLinkSmartPlug Class Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartPlug encloses plug specific system information and plug controls Properties Features Returns the feature (capability) abbreviations for this plug public string [] Features { get ; private set ; } LedOn If status led on smart plug is on public bool LedOn { get ; private set ; } OutletPowered Returns whether the plugs outlet relay is powered on public bool OutletPowered { get ; private set ; } PoweredOnSince Returns DateTime the relay was powered on public DateTime PoweredOnSince { get ; private set ; } Constructors TPLinkSmartPlug(string, int) Creates a new object of this type, used for HS100/HS105 plug public TPLinkSmartPlug ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this plug int port : plug communicates on this port, defaults to 9999 Methods Create(string, int) Factory instantiation method. Returns a new instance of this type. public static async Task < TPLinkSmartPlug > Create ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this plug int port : plug communicates on this port, defaults to 9999 Refresh() Refreshes all properties of this plug (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh () SetPoweredOn(bool) Change the plugs outlet relay state public async Task SetPoweredOn ( bool value ) Parameters bool value : true power on, false power off SetLedOn(bool) Change the plugs LED state; branded as night mode by tp-link :) public void SetLedOn ( bool value ) Parameters bool value : true LED on (day mode), false LED off (night mode)","title":"TPLinkSmartPlug"},{"location":"docs/devices/plug/#tplinksmartplug-class","text":"Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartPlug encloses plug specific system information and plug controls","title":"TPLinkSmartPlug Class"},{"location":"docs/devices/plug/#properties","text":"","title":"Properties"},{"location":"docs/devices/plug/#features","text":"Returns the feature (capability) abbreviations for this plug public string [] Features { get ; private set ; }","title":"Features"},{"location":"docs/devices/plug/#ledon","text":"If status led on smart plug is on public bool LedOn { get ; private set ; }","title":"LedOn"},{"location":"docs/devices/plug/#outletpowered","text":"Returns whether the plugs outlet relay is powered on public bool OutletPowered { get ; private set ; }","title":"OutletPowered"},{"location":"docs/devices/plug/#poweredonsince","text":"Returns DateTime the relay was powered on public DateTime PoweredOnSince { get ; private set ; }","title":"PoweredOnSince"},{"location":"docs/devices/plug/#constructors","text":"","title":"Constructors"},{"location":"docs/devices/plug/#tplinksmartplugstring-int","text":"Creates a new object of this type, used for HS100/HS105 plug public TPLinkSmartPlug ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this plug int port : plug communicates on this port, defaults to 9999","title":"TPLinkSmartPlug(string, int)"},{"location":"docs/devices/plug/#methods","text":"","title":"Methods"},{"location":"docs/devices/plug/#create","text":"Factory instantiation method. Returns a new instance of this type. public static async Task < TPLinkSmartPlug > Create ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this plug int port : plug communicates on this port, defaults to 9999","title":"Create(string, int)"},{"location":"docs/devices/plug/#refresh","text":"Refreshes all properties of this plug (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh ()","title":"Refresh()"},{"location":"docs/devices/plug/#power","text":"Change the plugs outlet relay state public async Task SetPoweredOn ( bool value ) Parameters bool value : true power on, false power off","title":"SetPoweredOn(bool)"},{"location":"docs/devices/plug/#setledonbool","text":"Change the plugs LED state; branded as night mode by tp-link :) public void SetLedOn ( bool value ) Parameters bool value : true LED on (day mode), false LED off (night mode)","title":"SetLedOn(bool)"},{"location":"docs/devices/smartmeter-plug/","text":"TPLinkSmartMeterPlug Class Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartPlug -> TPLinkSmartMeterPlug provides data on power consumption of comsumers connected to a HS110 plug Properties CurrentPowerUsage Returns a PowerData object including power usage data from the latest call to the construtor or .Refresh() public PowerData CurrentPowerUsage { get ; private set ; } IGain Returns ratio of output current to input current. public uint IGain { get ; private set ; } VGain Returns ratio of output voltage to input voltage. public uint VGain { get ; private set ; } Constructors TPLinkSmartMeterPlug(string) Creates a new object of this type, used for HS110 plug public TPLinkSmartMeterPlug ( string hostname ) Parameters string hostname : ip-address of of this plug Methods Create(string, int) Factory instantiation method. Returns a new instance of this type. public static async Task < TPLinkSmartMeterPlug > Create ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this plug int port : plug communicates on this port, defaults to 9999 Refresh() Updates current power usage, gain data and all other properties of this plug (includes a call to TPLinkSmartPlug.Refresh() for the common device information) public async Task Refresh () EraseStats() Erases all collected e-meter statistics of this plug public void EraseStats () GetMonthStats(DateTime, float) Queries collected usage statistics from a specific month. Returns a Dictionary < DateTime , float > of each day in a month and energy consumption of that day in kWh) public async Task < Dictionary < DateTime , float >> GetMonthStats ( int month , int year ) Parameters int month : month of year, ranging from 1 (January) to 12 (December) int year : GetYearStats(int, float) Queries collected usage statistics for a whole year. Returns a Dictionary < int , float > of each month and energy consumption of that month in kWh) public async Task < Dictionary < int , float >> GetYearStats ( int year ) Parameters int year :","title":"TPLinkSmartMeterPlug"},{"location":"docs/devices/smartmeter-plug/#tplinksmartmeterplug-class","text":"Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartPlug -> TPLinkSmartMeterPlug provides data on power consumption of comsumers connected to a HS110 plug","title":"TPLinkSmartMeterPlug Class"},{"location":"docs/devices/smartmeter-plug/#properties","text":"","title":"Properties"},{"location":"docs/devices/smartmeter-plug/#currentpowerusage","text":"Returns a PowerData object including power usage data from the latest call to the construtor or .Refresh() public PowerData CurrentPowerUsage { get ; private set ; }","title":"CurrentPowerUsage"},{"location":"docs/devices/smartmeter-plug/#igain","text":"Returns ratio of output current to input current. public uint IGain { get ; private set ; }","title":"IGain"},{"location":"docs/devices/smartmeter-plug/#vgain","text":"Returns ratio of output voltage to input voltage. public uint VGain { get ; private set ; }","title":"VGain"},{"location":"docs/devices/smartmeter-plug/#constructors","text":"","title":"Constructors"},{"location":"docs/devices/smartmeter-plug/#tplinksmartmeterplugstring","text":"Creates a new object of this type, used for HS110 plug public TPLinkSmartMeterPlug ( string hostname ) Parameters string hostname : ip-address of of this plug","title":"TPLinkSmartMeterPlug(string)"},{"location":"docs/devices/smartmeter-plug/#methods","text":"","title":"Methods"},{"location":"docs/devices/smartmeter-plug/#create","text":"Factory instantiation method. Returns a new instance of this type. public static async Task < TPLinkSmartMeterPlug > Create ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this plug int port : plug communicates on this port, defaults to 9999","title":"Create(string, int)"},{"location":"docs/devices/smartmeter-plug/#refresh","text":"Updates current power usage, gain data and all other properties of this plug (includes a call to TPLinkSmartPlug.Refresh() for the common device information) public async Task Refresh ()","title":"Refresh()"},{"location":"docs/devices/smartmeter-plug/#erasestats","text":"Erases all collected e-meter statistics of this plug public void EraseStats ()","title":"EraseStats()"},{"location":"docs/devices/smartmeter-plug/#getmonthstatsdatetime-float","text":"Queries collected usage statistics from a specific month. Returns a Dictionary < DateTime , float > of each day in a month and energy consumption of that day in kWh) public async Task < Dictionary < DateTime , float >> GetMonthStats ( int month , int year ) Parameters int month : month of year, ranging from 1 (January) to 12 (December) int year :","title":"GetMonthStats(DateTime, float)"},{"location":"docs/devices/smartmeter-plug/#getyearstatsint-float","text":"Queries collected usage statistics for a whole year. Returns a Dictionary < int , float > of each month and energy consumption of that month in kWh) public async Task < Dictionary < int , float >> GetYearStats ( int year ) Parameters int year :","title":"GetYearStats(int, float)"}]}