{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to tplink-smartdevices Documentation tplink-smartdevices is a .NET standard 2.0 library for discovering and operating TP-Link smart devices. It allows developers to discover and operate TP-Link smart devices with C# applications such as Xamarin, UWP or .net framework. This includes support for TP-Link smart plugs HS100/105/110 as well as TP-Link smart bulbs KL/LB: 100/110/120/130. Visit the project at github . Ready to dive in ? getting started full documentation common issues","title":"Home"},{"location":"#welcome-to-tplink-smartdevices-documentation","text":"tplink-smartdevices is a .NET standard 2.0 library for discovering and operating TP-Link smart devices. It allows developers to discover and operate TP-Link smart devices with C# applications such as Xamarin, UWP or .net framework. This includes support for TP-Link smart plugs HS100/105/110 as well as TP-Link smart bulbs KL/LB: 100/110/120/130. Visit the project at github .","title":"Welcome to tplink-smartdevices Documentation"},{"location":"#ready-to-dive-in","text":"getting started full documentation common issues","title":"Ready to dive in ?"},{"location":"about/","text":"","title":"About"},{"location":"getting-started/","text":"Getting Started Installation Use NuGet package manager to add a reference to this project .NET CLI > dotnet add package tplink-smartdevices --version 1.0.3 PackageReference < PackageReference Include = \"tplink-smartdevices\" Version = \"1.0.3\" /> Package Manager Install-Package tplink-smartdevices -Version 1.0.3 .NET Standard Be aware that this library targets .net standard, which can not be implemented from all of .net platform versions. To see whether the platform you intend to run on is supported take a look here . Supported Devices Class Supported Devices Not tested, maybe working TPLinkSmartPlug HS100 HS105 TPLinkSmartMeterPlug HS110 TPLinkSmartBulb KL100/KL110/KL130 KL50/KL60/LB100/LB110/LB120/LB130 Usage First Use If your devices are already connected to your Wi-Fi network (e.g through TP-Link provided mobile app Kasa) this step can be skipped. Otherwise you can use the following script to associate your smart devices with your home network: await new TPLinkDiscovery (). Associate ( \"ssid\" , \"password\" ); Full reference for TPLinkDiscovery().Associate(string, string) Caution The device running the above script needs to be connected to the network which the tplink smart devices provide. They should be called \"TP-Link_Smart Plug_XXXX\" or similar. If you have a brand new plug/bulb this network should automatically appear. Otherwise, hold down the reset button on a plug for about 10 seconds, until its light blinks amber rapidly. For a bulb flip the switch on and off 5 times. Not too quickly though! (About 1 sec per flip). Discovery Smart devices which are already connected to the same network as the host devices (PC, tablet, phone, ...) can be discovered to establish further communcation such as turning the device on/off. The discovery runs in an async Task<List<TPLinkSmartDevice>> . There is the possibility to register an event handler which triggers on each discovered device. If the ip-address of smart devices are known and not changing, an object of their associated classes can be created manually without the need for discovery. Basic var discoveredDevices = await new TPLinkDiscovery (). Discover (); Full reference for TPLinkDiscovery.Discover() With event TPLinkDiscovery discovery = new TPLinkDiscovery (); discovery . DeviceFound += delegate { ... Console . WriteLine ( $ \"Device found: {e.Device.Alias}\" ); ... }; var discoveredDevices = await discovery . Discover (); Full reference for TPLinkDiscovery.DeviceFound Manually var smartPlug = new TPLinkSmartPlug ( \"100.10.4.1\" ); //or var smartBulb = new TPLinkSmartBulb ( \"100.10.4.2\" ); Full reference for TPLinkSmartPlug and TPLinkSmartBulb Remote Control If you want to control your devices remotely (not from within the same network) there is the possibility to link each device independently to your kasa account. It then shows up in your Kasa app and can be controlled over the internet from wherever it's needed. smartDevice . ConfigureRemoteAccess ( \"username\" , \"password\" ); Full reference for TPLinkSmartDevice.ConfigureRemoteAccess(string, string) Basic Usage Example Following script is a basic example which describes the use-case of turning on all smart plugs in your current network: var discoveredDevices = await new TPLinkDiscovery (). Discover (); foreach ( var item in discoveredDevices ) { if ( item is TPLinkSmartPlug plug ) { plug . SetOutletPowered ( true ); } } Full reference for TPLinkSmartPlug.SetOutletPowered(bool)","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"Use NuGet package manager to add a reference to this project .NET CLI > dotnet add package tplink-smartdevices --version 1.0.3 PackageReference < PackageReference Include = \"tplink-smartdevices\" Version = \"1.0.3\" /> Package Manager Install-Package tplink-smartdevices -Version 1.0.3 .NET Standard Be aware that this library targets .net standard, which can not be implemented from all of .net platform versions. To see whether the platform you intend to run on is supported take a look here .","title":"Installation"},{"location":"getting-started/#supported-devices","text":"Class Supported Devices Not tested, maybe working TPLinkSmartPlug HS100 HS105 TPLinkSmartMeterPlug HS110 TPLinkSmartBulb KL100/KL110/KL130 KL50/KL60/LB100/LB110/LB120/LB130","title":"Supported Devices"},{"location":"getting-started/#usage","text":"","title":"Usage"},{"location":"getting-started/#first-use","text":"If your devices are already connected to your Wi-Fi network (e.g through TP-Link provided mobile app Kasa) this step can be skipped. Otherwise you can use the following script to associate your smart devices with your home network: await new TPLinkDiscovery (). Associate ( \"ssid\" , \"password\" ); Full reference for TPLinkDiscovery().Associate(string, string) Caution The device running the above script needs to be connected to the network which the tplink smart devices provide. They should be called \"TP-Link_Smart Plug_XXXX\" or similar. If you have a brand new plug/bulb this network should automatically appear. Otherwise, hold down the reset button on a plug for about 10 seconds, until its light blinks amber rapidly. For a bulb flip the switch on and off 5 times. Not too quickly though! (About 1 sec per flip).","title":"First Use"},{"location":"getting-started/#discovery","text":"Smart devices which are already connected to the same network as the host devices (PC, tablet, phone, ...) can be discovered to establish further communcation such as turning the device on/off. The discovery runs in an async Task<List<TPLinkSmartDevice>> . There is the possibility to register an event handler which triggers on each discovered device. If the ip-address of smart devices are known and not changing, an object of their associated classes can be created manually without the need for discovery. Basic var discoveredDevices = await new TPLinkDiscovery (). Discover (); Full reference for TPLinkDiscovery.Discover() With event TPLinkDiscovery discovery = new TPLinkDiscovery (); discovery . DeviceFound += delegate { ... Console . WriteLine ( $ \"Device found: {e.Device.Alias}\" ); ... }; var discoveredDevices = await discovery . Discover (); Full reference for TPLinkDiscovery.DeviceFound Manually var smartPlug = new TPLinkSmartPlug ( \"100.10.4.1\" ); //or var smartBulb = new TPLinkSmartBulb ( \"100.10.4.2\" ); Full reference for TPLinkSmartPlug and TPLinkSmartBulb","title":"Discovery"},{"location":"getting-started/#remote-control","text":"If you want to control your devices remotely (not from within the same network) there is the possibility to link each device independently to your kasa account. It then shows up in your Kasa app and can be controlled over the internet from wherever it's needed. smartDevice . ConfigureRemoteAccess ( \"username\" , \"password\" ); Full reference for TPLinkSmartDevice.ConfigureRemoteAccess(string, string)","title":"Remote Control"},{"location":"getting-started/#basic-usage-example","text":"Following script is a basic example which describes the use-case of turning on all smart plugs in your current network: var discoveredDevices = await new TPLinkDiscovery (). Discover (); foreach ( var item in discoveredDevices ) { if ( item is TPLinkSmartPlug plug ) { plug . SetOutletPowered ( true ); } } Full reference for TPLinkSmartPlug.SetOutletPowered(bool)","title":"Basic Usage Example"},{"location":"docs/","text":"Full API Reference Classes TPLinkSmartDevice.Devices Description TPLinkDiscovery handles discovery of new smart devices and connection of factory new devices to a network TPLinkSmartDevice provides top-level functionalities which all smart devices use, including set up of remote access and several system information properties TPLinkSmartPlug encloses plug specific system information and plug controls TPLinkSmartMeterPlug provides data on power consumption of comsumers connected to a HS110 plug TPLinkSmartBulb encloses bulb specific system information and bulb controls TPLinkSmartDevice.Data Description BulbHSV represents a single color in the HSV color model to change a smart bulbs color PowerData Encapsulates JSON data structure for current energy use as metered by the HS110 Smart Energy Meter","title":"Full API Reference"},{"location":"docs/#full-api-reference","text":"","title":"Full API Reference"},{"location":"docs/#classes","text":"TPLinkSmartDevice.Devices Description TPLinkDiscovery handles discovery of new smart devices and connection of factory new devices to a network TPLinkSmartDevice provides top-level functionalities which all smart devices use, including set up of remote access and several system information properties TPLinkSmartPlug encloses plug specific system information and plug controls TPLinkSmartMeterPlug provides data on power consumption of comsumers connected to a HS110 plug TPLinkSmartBulb encloses bulb specific system information and bulb controls TPLinkSmartDevice.Data Description BulbHSV represents a single color in the HSV color model to change a smart bulbs color PowerData Encapsulates JSON data structure for current energy use as metered by the HS110 Smart Energy Meter","title":"Classes"},{"location":"docs/discovery/","text":"TPLinkDiscovery Class Namespace: TPLinkSmartDevices handles discovery of new smart devices and connection of factory new devices to a network Properties DiscoveredDevices Returns a list of TPLinkSmartDevice 's from the latest call of .Discover() . This property is read-only. public List < TPLinkSmartDevice > DiscoveredDevices { get ; private set ; } Methods Discover(int, int, string) Discovers smart devices within the network of the host via UDP broadcast. Returns a list of TPLinkSmartDevice 's. public async Task < List < TPLinkSmartDevice >> Discover ( int port = 9999 , int timeout = 5000 , string target = \"255.255.255.255\" ) Parameters int port : Listen to broadcast responses on this port, defaults to 9999 int timeout : Timespan after which the discovery finishes, defaults to 5000 (5 seconds) string target : ip address of discovery broadcast, defaults to 255.255.255.255 Method is awaitable Tip The discovery of devices within a network fails under certain circumstances. Some routers seem to block udp packets to the broadcast address (255.255.255.255), which is used to send out a discovery request. In case of using different subnet's, what seems to resolve the issue is broadcasting to the subnet's local broadcast IP (such as 192.168.0.255, if IP is 192.168.0.X with a subnet mask of 255.255.255.0) Associate(string, string, int) Makes smart device connect to specified network credentials public async Task Associate ( string ssid , string password , int type = 3 ) Parameters string ssid : Service Set Identifier (name) of network to connect to string password : password of network to connect to int type : network protection level, defaults to 3 indicating WPA2 Caution Host who runs the application needs to be connected to the open configuration network! (TP-Link_Smart Plug_XXXX or similar) Method is awaitable Events DeviceFound Triggers when smart device is found during discovery process, granting access to all system properties of that device via the event args public event EventHandler < DeviceFoundEventArgs > DeviceFound ; EventArgs DeviceFoundEventArgs e Example new TPLinkDiscovery (). DeviceFound += ( s , e ) { ... Console . WriteLine ( $ \"Device found: {e.Device.Alias}\" ); ... };","title":"TPLinkDiscovery"},{"location":"docs/discovery/#tplinkdiscovery-class","text":"Namespace: TPLinkSmartDevices handles discovery of new smart devices and connection of factory new devices to a network","title":"TPLinkDiscovery Class"},{"location":"docs/discovery/#properties","text":"","title":"Properties"},{"location":"docs/discovery/#discovereddevices","text":"Returns a list of TPLinkSmartDevice 's from the latest call of .Discover() . This property is read-only. public List < TPLinkSmartDevice > DiscoveredDevices { get ; private set ; }","title":"DiscoveredDevices"},{"location":"docs/discovery/#methods","text":"","title":"Methods"},{"location":"docs/discovery/#discover","text":"Discovers smart devices within the network of the host via UDP broadcast. Returns a list of TPLinkSmartDevice 's. public async Task < List < TPLinkSmartDevice >> Discover ( int port = 9999 , int timeout = 5000 , string target = \"255.255.255.255\" ) Parameters int port : Listen to broadcast responses on this port, defaults to 9999 int timeout : Timespan after which the discovery finishes, defaults to 5000 (5 seconds) string target : ip address of discovery broadcast, defaults to 255.255.255.255 Method is awaitable Tip The discovery of devices within a network fails under certain circumstances. Some routers seem to block udp packets to the broadcast address (255.255.255.255), which is used to send out a discovery request. In case of using different subnet's, what seems to resolve the issue is broadcasting to the subnet's local broadcast IP (such as 192.168.0.255, if IP is 192.168.0.X with a subnet mask of 255.255.255.0)","title":"Discover(int, int, string)"},{"location":"docs/discovery/#associatestring-string-int","text":"Makes smart device connect to specified network credentials public async Task Associate ( string ssid , string password , int type = 3 ) Parameters string ssid : Service Set Identifier (name) of network to connect to string password : password of network to connect to int type : network protection level, defaults to 3 indicating WPA2 Caution Host who runs the application needs to be connected to the open configuration network! (TP-Link_Smart Plug_XXXX or similar) Method is awaitable","title":"Associate(string, string, int)"},{"location":"docs/discovery/#events","text":"","title":"Events"},{"location":"docs/discovery/#devicefound","text":"Triggers when smart device is found during discovery process, granting access to all system properties of that device via the event args public event EventHandler < DeviceFoundEventArgs > DeviceFound ; EventArgs DeviceFoundEventArgs e Example new TPLinkDiscovery (). DeviceFound += ( s , e ) { ... Console . WriteLine ( $ \"Device found: {e.Device.Alias}\" ); ... };","title":"DeviceFound"},{"location":"docs/data/hsv/","text":"BulbHSV Class Namespace: TPLinkSmartDevices.Data represents a single color in the HSV color model to change a smart bulbs color Properties Hue Angular dimension representing color, 0\u00b0/360\u00b0 red, 120\u00b0 green, 240\u00b0 blue public int Hue { get ; set ; } Saturation Resembles various tints of color. Accepts values from 0-100. public int Saturation { get ; set ; } Value Brightness of color (mixture of hue with varying amounts of black or white paint). Accepts values from 0-100. public int Value { get ; set ; }","title":"BulbHSV"},{"location":"docs/data/hsv/#bulbhsv-class","text":"Namespace: TPLinkSmartDevices.Data represents a single color in the HSV color model to change a smart bulbs color","title":"BulbHSV Class"},{"location":"docs/data/hsv/#properties","text":"","title":"Properties"},{"location":"docs/data/hsv/#hue","text":"Angular dimension representing color, 0\u00b0/360\u00b0 red, 120\u00b0 green, 240\u00b0 blue public int Hue { get ; set ; }","title":"Hue"},{"location":"docs/data/hsv/#saturation","text":"Resembles various tints of color. Accepts values from 0-100. public int Saturation { get ; set ; }","title":"Saturation"},{"location":"docs/data/hsv/#value","text":"Brightness of color (mixture of hue with varying amounts of black or white paint). Accepts values from 0-100. public int Value { get ; set ; }","title":"Value"},{"location":"docs/data/power/","text":"PowerData Class Namespace: TPLinkSmartDevices.Data Encapsulates JSON data structure for current energy use as metered by the HS110 Smart Energy Meter. Properties Voltage Currently measured voltage in volts public double Voltage { get ; private set ; } Amperage Currently measured current in amperes public double Amperage { get ; private set ; } Power Currently measured power in watts public double Power { get ; private set ; } Total Total power consumption in kilowatthours public double Total { get ; private set ; }","title":"PowerData"},{"location":"docs/data/power/#powerdata-class","text":"Namespace: TPLinkSmartDevices.Data Encapsulates JSON data structure for current energy use as metered by the HS110 Smart Energy Meter.","title":"PowerData Class"},{"location":"docs/data/power/#properties","text":"","title":"Properties"},{"location":"docs/data/power/#voltage","text":"Currently measured voltage in volts public double Voltage { get ; private set ; }","title":"Voltage"},{"location":"docs/data/power/#amperage","text":"Currently measured current in amperes public double Amperage { get ; private set ; }","title":"Amperage"},{"location":"docs/data/power/#power","text":"Currently measured power in watts public double Power { get ; private set ; }","title":"Power"},{"location":"docs/data/power/#total","text":"Total power consumption in kilowatthours public double Total { get ; private set ; }","title":"Total"},{"location":"docs/devices/bulb/","text":"TPLinkSmartBulb Class Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartBulb encloses bulb specific system information and bulb controls Properties IsColor Returns whether bulb supports color changes public bool IsColor { get ; private set ; } IsDimmable Returns whether bulb supports dimming the brightness public bool IsDimmable { get ; private set ; } IsVariableColorTemperature Returns whether bulb supports changing of color temperature public bool IsVariableColorTemperature { get ; private set ; } Brightness Returns bulb brightness in percent public int Brightness { get ; private set ; } ColorTemperature Returns bulbs color temperature in kelvin public int ColorTemperature { get ; private set ; } HSV Returns bulb color in HSV scheme public BulbHSV HSV { get ; private set ; } PoweredOn Returns whether bulb is powered on public bool PoweredOn { get ; private set ; } Constructors TPLinkSmartBulb(string, int) Creates a new object of this type, used for KL100/KL110/KL130 bulbs public TPLinkSmartBulb ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this bulb int port : bulb communicates on this port, defaults to 9999 Methods Refresh() Refreshes all properties of this bulb (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh () Method is awaitable SetPoweredOn(bool) Change the power state of this bulb public void SetPoweredOn ( bool value ) Parameters bool value : true power on, false power off SetBrightness(int) Change the bulbs brightness public void SetBrightness ( int brightness ) Parameters int brightness : brightness value in percent Exceptions NotSupportedException : the bulb does not support dimming SetColorTemp(int) Change the bulbs color temperature public void SetColorTemp ( int colortemp ) Parameters int colortemp : color temperature in kelvin, common values ranging between 2700K (soft light) to 6500K (bright daylight) Exceptions NotSupportedException : the bulb does not support color temperature changes Note Color temperature values depend on device model, for instance KL120 supports 2500K-5000K and KL130 2700K-9000K! SetColorTemp(BulbHSV) Change the bulbs color public void SetHSV ( BulbHSV hsv ) Parameters BulbHSV hsv : color in HSV color scheme, see BulbHSV reference Exceptions NotSupportedException : the bulb does not support color changes","title":"TPLinkSmartBulb"},{"location":"docs/devices/bulb/#tplinksmartbulb-class","text":"Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartBulb encloses bulb specific system information and bulb controls","title":"TPLinkSmartBulb Class"},{"location":"docs/devices/bulb/#properties","text":"","title":"Properties"},{"location":"docs/devices/bulb/#iscolor","text":"Returns whether bulb supports color changes public bool IsColor { get ; private set ; }","title":"IsColor"},{"location":"docs/devices/bulb/#isdimmable","text":"Returns whether bulb supports dimming the brightness public bool IsDimmable { get ; private set ; }","title":"IsDimmable"},{"location":"docs/devices/bulb/#isvariablecolortemperature","text":"Returns whether bulb supports changing of color temperature public bool IsVariableColorTemperature { get ; private set ; }","title":"IsVariableColorTemperature"},{"location":"docs/devices/bulb/#brightness","text":"Returns bulb brightness in percent public int Brightness { get ; private set ; }","title":"Brightness"},{"location":"docs/devices/bulb/#colortemperature","text":"Returns bulbs color temperature in kelvin public int ColorTemperature { get ; private set ; }","title":"ColorTemperature"},{"location":"docs/devices/bulb/#hsv","text":"Returns bulb color in HSV scheme public BulbHSV HSV { get ; private set ; }","title":"HSV"},{"location":"docs/devices/bulb/#poweredon","text":"Returns whether bulb is powered on public bool PoweredOn { get ; private set ; }","title":"PoweredOn"},{"location":"docs/devices/bulb/#constructors","text":"","title":"Constructors"},{"location":"docs/devices/bulb/#tplinksmartbulbstring-int","text":"Creates a new object of this type, used for KL100/KL110/KL130 bulbs public TPLinkSmartBulb ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this bulb int port : bulb communicates on this port, defaults to 9999","title":"TPLinkSmartBulb(string, int)"},{"location":"docs/devices/bulb/#methods","text":"","title":"Methods"},{"location":"docs/devices/bulb/#refresh","text":"Refreshes all properties of this bulb (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh () Method is awaitable","title":"Refresh()"},{"location":"docs/devices/bulb/#setpoweredonbool","text":"Change the power state of this bulb public void SetPoweredOn ( bool value ) Parameters bool value : true power on, false power off","title":"SetPoweredOn(bool)"},{"location":"docs/devices/bulb/#setbrightnessint","text":"Change the bulbs brightness public void SetBrightness ( int brightness ) Parameters int brightness : brightness value in percent Exceptions NotSupportedException : the bulb does not support dimming","title":"SetBrightness(int)"},{"location":"docs/devices/bulb/#setcolortempint","text":"Change the bulbs color temperature public void SetColorTemp ( int colortemp ) Parameters int colortemp : color temperature in kelvin, common values ranging between 2700K (soft light) to 6500K (bright daylight) Exceptions NotSupportedException : the bulb does not support color temperature changes Note Color temperature values depend on device model, for instance KL120 supports 2500K-5000K and KL130 2700K-9000K!","title":"SetColorTemp(int)"},{"location":"docs/devices/bulb/#setcolortempbulbhsv","text":"Change the bulbs color public void SetHSV ( BulbHSV hsv ) Parameters BulbHSV hsv : color in HSV color scheme, see BulbHSV reference Exceptions NotSupportedException : the bulb does not support color changes","title":"SetColorTemp(BulbHSV)"},{"location":"docs/devices/device/","text":"TPLinkSmartDevice Class Namespace: TPLinkSmartDevices.Devices provides top-level functionalities which all smart devices use, including set up of remote access and several system information properties Properties Alias Returns the user specified (or default) name of this device public string Alias { get ; private set ; } CloudServer Returns the name of the server this device communicates to for cloud commands public string CloudServer { get ; private set ; } DeviceId Returns the id of this device public string DeviceId { get ; private set ; } DevName Returns the name of this device public string DevName { get ; private set ; } FirmwareId Returns the firmware id of this device public string FirmwareId { get ; private set ; } HardwareId Returns the hardware id of this device public string HardwareId { get ; private set ; } HardwareVersion Returns the hardware version of this device public string HardwareVersion { get ; private set ; } Hostname Returns the ip-address of this device public string Hostname { get ; private set ; } LocationLatLong Returns the coordinates of the rough position the device is located at (location of network). LocationLatLong[0] is latitude, LocationLatLong[1] is longitude public double [] LocationLatLong { get ; private set ; } Caution whether you find it questionable (I do!) or not, tp-link's devices collect data on position of your network. MacAddress Returns the mac address of this device public string MacAddress { get ; private set ; } Model Returns the model and region code (EU,US,UK,JP, ...) of this device public string Model { get ; private set ; } OemId Returns the manufacturers id of this device public string OemId { get ; private set ; } Port Returns the port this device communicates on public int Port { get ; private set ; } RemoteAccessEnabled Returns whether this device is configured for remote access via Kasa app public bool RemoteAccessEnabled { get ; private set ; } RSSI Returns signal strength public int RSSI { get ; private set ; } Type public string Type { get ; private set ; } Methods ConfigureRemoteAccess(string, string) Binds account with the specified credentials to tp-link's cloud server public async Task ConfigureRemoteAccess ( string username , string password ) Parameters string username : username (e-mail address) of kasa account string password : password of kasa account Method is awaitable UnbindRemoteAccess() Unbinds currently connected account from tp-link's cloud server public void UnbindRemoteAccess () GetCloudInfo() Refreshes cloud information and sets RemoteAccessEnabled and CloudServer properties accordingly public void GetCloudInfo () GetTime() Returns current internal time of this device public DateTime GetTime () Needs Maintenance This method needs maintenance. It is discouraged using it due to unexpected results or errors occurring Refresh(dynamic) Refreshes all properties of this device (includes a call to GetCloudInfo() ) public async Task Refresh ( dynamic sysInfo = null ) Parameters dynamic sysInfo : response of smart devices on system properties, defaults to null which results in a new request being made Method is awaitable SetAlias(string) Sets alias of this device public void SetAlias ( string value ) Parameters string value : new alias to set","title":"TPLinkSmartDevice"},{"location":"docs/devices/device/#tplinksmartdevice-class","text":"Namespace: TPLinkSmartDevices.Devices provides top-level functionalities which all smart devices use, including set up of remote access and several system information properties","title":"TPLinkSmartDevice Class"},{"location":"docs/devices/device/#properties","text":"","title":"Properties"},{"location":"docs/devices/device/#alias","text":"Returns the user specified (or default) name of this device public string Alias { get ; private set ; }","title":"Alias"},{"location":"docs/devices/device/#cloudserver","text":"Returns the name of the server this device communicates to for cloud commands public string CloudServer { get ; private set ; }","title":"CloudServer"},{"location":"docs/devices/device/#deviceid","text":"Returns the id of this device public string DeviceId { get ; private set ; }","title":"DeviceId"},{"location":"docs/devices/device/#devname","text":"Returns the name of this device public string DevName { get ; private set ; }","title":"DevName"},{"location":"docs/devices/device/#firmwareid","text":"Returns the firmware id of this device public string FirmwareId { get ; private set ; }","title":"FirmwareId"},{"location":"docs/devices/device/#hardwareid","text":"Returns the hardware id of this device public string HardwareId { get ; private set ; }","title":"HardwareId"},{"location":"docs/devices/device/#hardwareversion","text":"Returns the hardware version of this device public string HardwareVersion { get ; private set ; }","title":"HardwareVersion"},{"location":"docs/devices/device/#hostname","text":"Returns the ip-address of this device public string Hostname { get ; private set ; }","title":"Hostname"},{"location":"docs/devices/device/#locationlatlong","text":"Returns the coordinates of the rough position the device is located at (location of network). LocationLatLong[0] is latitude, LocationLatLong[1] is longitude public double [] LocationLatLong { get ; private set ; } Caution whether you find it questionable (I do!) or not, tp-link's devices collect data on position of your network.","title":"LocationLatLong"},{"location":"docs/devices/device/#macaddress","text":"Returns the mac address of this device public string MacAddress { get ; private set ; }","title":"MacAddress"},{"location":"docs/devices/device/#model","text":"Returns the model and region code (EU,US,UK,JP, ...) of this device public string Model { get ; private set ; }","title":"Model"},{"location":"docs/devices/device/#oemid","text":"Returns the manufacturers id of this device public string OemId { get ; private set ; }","title":"OemId"},{"location":"docs/devices/device/#port","text":"Returns the port this device communicates on public int Port { get ; private set ; }","title":"Port"},{"location":"docs/devices/device/#remoteaccessenabled","text":"Returns whether this device is configured for remote access via Kasa app public bool RemoteAccessEnabled { get ; private set ; }","title":"RemoteAccessEnabled"},{"location":"docs/devices/device/#rssi","text":"Returns signal strength public int RSSI { get ; private set ; }","title":"RSSI"},{"location":"docs/devices/device/#type","text":"public string Type { get ; private set ; }","title":"Type"},{"location":"docs/devices/device/#methods","text":"","title":"Methods"},{"location":"docs/devices/device/#configureremoteaccessstring-string","text":"Binds account with the specified credentials to tp-link's cloud server public async Task ConfigureRemoteAccess ( string username , string password ) Parameters string username : username (e-mail address) of kasa account string password : password of kasa account Method is awaitable","title":"ConfigureRemoteAccess(string, string)"},{"location":"docs/devices/device/#unbindremoteaccess","text":"Unbinds currently connected account from tp-link's cloud server public void UnbindRemoteAccess ()","title":"UnbindRemoteAccess()"},{"location":"docs/devices/device/#getcloudinfo","text":"Refreshes cloud information and sets RemoteAccessEnabled and CloudServer properties accordingly public void GetCloudInfo ()","title":"GetCloudInfo()"},{"location":"docs/devices/device/#gettime","text":"Returns current internal time of this device public DateTime GetTime () Needs Maintenance This method needs maintenance. It is discouraged using it due to unexpected results or errors occurring","title":"GetTime()"},{"location":"docs/devices/device/#refreshdynamic","text":"Refreshes all properties of this device (includes a call to GetCloudInfo() ) public async Task Refresh ( dynamic sysInfo = null ) Parameters dynamic sysInfo : response of smart devices on system properties, defaults to null which results in a new request being made Method is awaitable","title":"Refresh(dynamic)"},{"location":"docs/devices/device/#setaliasstring","text":"Sets alias of this device public void SetAlias ( string value ) Parameters string value : new alias to set","title":"SetAlias(string)"},{"location":"docs/devices/plug/","text":"TPLinkSmartPlug Class Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartPlug encloses plug specific system information and plug controls Properties Features Returns the feature (capability) abbreviations for this plug public string [] Features { get ; private set ; } LedOn If status led on smart plug is on public bool LedOn { get ; private set ; } OutletPowered Returns whether the plugs outlet relay is powered on public bool OutletPowered { get ; private set ; } PoweredOnSince Returns DateTime the relay was powered on public DateTime PoweredOnSince { get ; private set ; } Constructors TPLinkSmartPlug(string, int) Creates a new object of this type, used for HS100/HS105 plug public TPLinkSmartPlug ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this plug int port : plug communicates on this port, defaults to 9999 Methods Refresh() Refreshes all properties of this plug (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh () Method is awaitable SetOutletPowered(bool) Change the plugs outlet relay state public void SetOutletPowered ( bool value ) Parameters bool value : true power on, false power off SetLedOn(bool) Change the plugs LED state; branded as night mode by tp-link :) public void SetLedOn ( bool value ) Parameters bool value : true LED on (day mode), false LED off (night mode)","title":"TPLinkSmartPlug"},{"location":"docs/devices/plug/#tplinksmartplug-class","text":"Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -> TPLinkSmartPlug encloses plug specific system information and plug controls","title":"TPLinkSmartPlug Class"},{"location":"docs/devices/plug/#properties","text":"","title":"Properties"},{"location":"docs/devices/plug/#features","text":"Returns the feature (capability) abbreviations for this plug public string [] Features { get ; private set ; }","title":"Features"},{"location":"docs/devices/plug/#ledon","text":"If status led on smart plug is on public bool LedOn { get ; private set ; }","title":"LedOn"},{"location":"docs/devices/plug/#outletpowered","text":"Returns whether the plugs outlet relay is powered on public bool OutletPowered { get ; private set ; }","title":"OutletPowered"},{"location":"docs/devices/plug/#poweredonsince","text":"Returns DateTime the relay was powered on public DateTime PoweredOnSince { get ; private set ; }","title":"PoweredOnSince"},{"location":"docs/devices/plug/#constructors","text":"","title":"Constructors"},{"location":"docs/devices/plug/#tplinksmartplugstring-int","text":"Creates a new object of this type, used for HS100/HS105 plug public TPLinkSmartPlug ( string hostname , int port = 9999 ) Parameters string hostname : ip-address of of this plug int port : plug communicates on this port, defaults to 9999","title":"TPLinkSmartPlug(string, int)"},{"location":"docs/devices/plug/#methods","text":"","title":"Methods"},{"location":"docs/devices/plug/#refresh","text":"Refreshes all properties of this plug (includes a call to TPLinkSmartDevice.Refresh(dynamic) for the common device information) public async Task Refresh () Method is awaitable","title":"Refresh()"},{"location":"docs/devices/plug/#setoutletpoweredbool","text":"Change the plugs outlet relay state public void SetOutletPowered ( bool value ) Parameters bool value : true power on, false power off","title":"SetOutletPowered(bool)"},{"location":"docs/devices/plug/#setledonbool","text":"Change the plugs LED state; branded as night mode by tp-link :) public void SetLedOn ( bool value ) Parameters bool value : true LED on (day mode), false LED off (night mode)","title":"SetLedOn(bool)"},{"location":"docs/devices/smartmeter-plug/","text":"TPLinkSmartMeterPlug Class Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartPlug -> TPLinkSmartMeterPlug provides data on power consumption of comsumers connected to a HS110 plug Properties CurrentPowerUsage Returns a PowerData object including power usage data from the latest call to the construtor or .Refresh() public PowerData CurrentPowerUsage { get ; private set ; } IGain Returns ratio of output current to input current. public uint IGain { get ; private set ; } VGain Returns ratio of output voltage to input voltage. public uint VGain { get ; private set ; } Constructors TPLinkSmartMeterPlug(string) Creates a new object of this type, used for HS110 plug public TPLinkSmartMeterPlug ( string hostname ) Parameters string hostname : ip-address of of this plug Methods Refresh() Updates current power usage, gain data and all other properties of this plug (includes a call to TPLinkSmartPlug.Refresh() for the common device information) public async Task Refresh () Method is awaitable EraseStats() Erases all collected e-meter statistics of this plug public void EraseStats () GetMonthStats(DateTime, float) Queries collected usage statistics from a specific month. Returns a Dictionary < DateTime , float > of each day in a month and energy consumption of that day in kWh) public async Task < Dictionary < DateTime , float >> GetMonthStats ( int month , int year ) Parameters int month : month of year, ranging from 1 (January) to 12 (December) int year : Method is awaitable GetYearStats(int, float) Queries collected usage statistics for a whole year. Returns a Dictionary < int , float > of each month and energy consumption of that month in kWh) public async Task < Dictionary < int , float >> GetYearStats ( int year ) Parameters int year : Method is awaitable","title":"TPLinkSmartMeterPlug"},{"location":"docs/devices/smartmeter-plug/#tplinksmartmeterplug-class","text":"Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartPlug -> TPLinkSmartMeterPlug provides data on power consumption of comsumers connected to a HS110 plug","title":"TPLinkSmartMeterPlug Class"},{"location":"docs/devices/smartmeter-plug/#properties","text":"","title":"Properties"},{"location":"docs/devices/smartmeter-plug/#currentpowerusage","text":"Returns a PowerData object including power usage data from the latest call to the construtor or .Refresh() public PowerData CurrentPowerUsage { get ; private set ; }","title":"CurrentPowerUsage"},{"location":"docs/devices/smartmeter-plug/#igain","text":"Returns ratio of output current to input current. public uint IGain { get ; private set ; }","title":"IGain"},{"location":"docs/devices/smartmeter-plug/#vgain","text":"Returns ratio of output voltage to input voltage. public uint VGain { get ; private set ; }","title":"VGain"},{"location":"docs/devices/smartmeter-plug/#constructors","text":"","title":"Constructors"},{"location":"docs/devices/smartmeter-plug/#tplinksmartmeterplugstring","text":"Creates a new object of this type, used for HS110 plug public TPLinkSmartMeterPlug ( string hostname ) Parameters string hostname : ip-address of of this plug","title":"TPLinkSmartMeterPlug(string)"},{"location":"docs/devices/smartmeter-plug/#methods","text":"","title":"Methods"},{"location":"docs/devices/smartmeter-plug/#refresh","text":"Updates current power usage, gain data and all other properties of this plug (includes a call to TPLinkSmartPlug.Refresh() for the common device information) public async Task Refresh () Method is awaitable","title":"Refresh()"},{"location":"docs/devices/smartmeter-plug/#erasestats","text":"Erases all collected e-meter statistics of this plug public void EraseStats ()","title":"EraseStats()"},{"location":"docs/devices/smartmeter-plug/#getmonthstatsdatetime-float","text":"Queries collected usage statistics from a specific month. Returns a Dictionary < DateTime , float > of each day in a month and energy consumption of that day in kWh) public async Task < Dictionary < DateTime , float >> GetMonthStats ( int month , int year ) Parameters int month : month of year, ranging from 1 (January) to 12 (December) int year : Method is awaitable","title":"GetMonthStats(DateTime, float)"},{"location":"docs/devices/smartmeter-plug/#getyearstatsint-float","text":"Queries collected usage statistics for a whole year. Returns a Dictionary < int , float > of each month and energy consumption of that month in kWh) public async Task < Dictionary < int , float >> GetYearStats ( int year ) Parameters int year : Method is awaitable","title":"GetYearStats(int, float)"}]}