{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to tplink-smartdevices Documentation","text":"<p>tplink-smartdevices is a .NET standard 2.0 library for discovering and operating TP-Link Smart Devices. It allows a developer to discover and operate TP-Link Smart Devices from multiple .NET implementations such as .NET Core, Xamarin, .NET Framework and more. </p>"},{"location":"#ready-to-dive-in","title":"Ready to dive in ?","text":"<p>Get Started Full Documentation </p> <ul> <li>Common Issues</li> <li>Changelog</li> </ul>"},{"location":"#supported-devices","title":"Supported Devices","text":"Class Supported Devices Not tested, maybe working <code>TPLinkSmartPlug</code> HS100 HS105, HS200 <code>TPLinkSmartMeterPlug</code> HS110 <code>TPLinkSmartBulb</code> KL100/KL110/KL130 KL50/KL60/LB100/LB110/LB120/LB130 <code>TPLinkSmartMultiPlug</code> HS300/HS107 KP200/KP303/KP400 <code>TPLinkSmartDimmer</code> HS220"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Use NuGet package manager to add a reference to this project</p> .NET CLI <pre><code>&gt; dotnet add package tplink-smartdevices --version 2.0.0\n</code></pre> PackageReference <pre><code>&lt;PackageReference Include=\"tplink-smartdevices\" Version=\"2.0.0\" /&gt;\n</code></pre> Package Manager <pre><code>Install-Package tplink-smartdevices -Version 2.0.0\n</code></pre> <p>.NET Standard</p> <p>Be aware that this library targets .net standard, which can not be implemented from all of .net platform versions. To see whether the platform you intend to run on is supported take a look here.</p>"},{"location":"getting-started/#supported-devices","title":"Supported Devices","text":"Class Supported Devices Not tested, maybe working <code>TPLinkSmartPlug</code> HS100 HS105 <code>TPLinkSmartMeterPlug</code> HS110 <code>TPLinkSmartBulb</code> KL100/KL110/KL130 KL50/KL60/LB100/LB110/LB120/LB130 <code>TPLinkSmartMultiPlug</code> HS300/HS107 KP200/KP303/KP400 <code>TPLinkSmartDimmer</code> HS220"},{"location":"getting-started/#usage","title":"Usage","text":""},{"location":"getting-started/#first-use","title":"First Use","text":"<p>If your devices are already connected to your Wi-Fi network (e.g through TP-Link provided mobile app Kasa) this step can be skipped. Otherwise you can use the following script to associate your smart devices with your home network:</p> <pre><code>await new TPLinkDiscovery().Associate(\"ssid\", \"password\");\n</code></pre> <p> Full reference for <code>TPLinkDiscovery().Associate(string, string)</code></p> <p>Caution</p> <p>The device running the above script needs to be connected to the network which the tplink smart devices provide. They should be called \"TP-Link_Smart Plug_XXXX\" or similar. If you have a brand new plug/bulb this network should automatically appear. Otherwise, hold down the reset button on a plug for about 10 seconds, until its light blinks amber rapidly. For a bulb flip the switch on and off 5 times. Not too quickly though! (About 1 sec per flip).</p>"},{"location":"getting-started/#discovery","title":"Discovery","text":"<p>Smart devices which are already connected to the same network as the host devices (PC, tablet, phone, ...) can be discovered to establish further communcation such as turning the device on/off. The discovery runs in an async <code>Task&lt;List&lt;TPLinkSmartDevice&gt;&gt;</code>. There is the possibility to register an event handler which triggers on each discovered device. If the ip-address of smart devices are known and not changing, an object of their associated classes can be created manually without the need for discovery.</p> Basic <p><pre><code>var discoveredDevices = await new TPLinkDiscovery().Discover();\n</code></pre>  Full reference for <code>TPLinkDiscovery.Discover()</code></p> With event <p><pre><code>TPLinkDiscovery discovery = new TPLinkDiscovery();\ndiscovery.DeviceFound += delegate {\n    ...\n    Console.WriteLine($\"Device found: {e.Device.Alias}\");\n    ...\n};\nvar discoveredDevices = await discovery.Discover();\n</code></pre>  Full reference for <code>TPLinkDiscovery.DeviceFound</code></p> Manual instantiation <p><pre><code>//with constructor (blocking!)\nvar smartPlug = new TPLinkSmartPlug(\"100.10.4.1\");\n//or with async factory method\nvar smartBulb = await TPLinkSmartPlug.Create(\"100.10.4.1\");\n</code></pre>  Full reference for <code>TPLinkSmartPlug</code> and <code>TPLinkSmartBulb</code></p>"},{"location":"getting-started/#basic-usage-examples","title":"Basic Usage Examples","text":"<p>Following script is a basic example which describes the use-case of turning on all smart plugs in your current network:</p> <p><pre><code>var discoveredDevices = await new TPLinkDiscovery().Discover();\n\nforeach (var item in discoveredDevices)\n{\n    if (item is TPLinkSmartPlug plug)\n    {\n        await plug.SetPoweredOn(true);\n    }\n}\n</code></pre>  Full reference for <code>TPLinkSmartPlug.SetPoweredOn(bool)</code></p> <p>Changing color of a single smart bulb (LB130, KL130):</p> <p><pre><code>var smartBulb = await TPLinkSmartBulb.Create(\"100.10.4.1\");\n\nBulbHSV red = new BulbHSV { Hue = 0, Saturation = 100, Value = 100 }; // red HSV(0, 100, 100)\nBulbHSV yellow = new BulbHSV { Hue = 60, Saturation = 100, Value = 100 };  // yellow HSV(60, 100, 100)\n\n//apply color (instant)\nsmartBulb.SetHSV(red);\n//apply color with transition time\nsmartBulb.SetHSV(yellow, 1000);\n</code></pre>  Full reference for <code>TPLinkSmartBulb.SetHSV(BulbHSV, int)</code></p>"},{"location":"getting-started/#remote-control","title":"Remote Control","text":"<p>If you want to control your devices remotely (not from within the same network) there is the possibility to link each device independently to your kasa account. It then shows up in your Kasa app and can be controlled over the internet from wherever it's needed.</p> <p><pre><code>smartDevice.ConfigureRemoteAccess(\"username\", \"password\");\n</code></pre>  Full reference for <code>TPLinkSmartDevice.ConfigureRemoteAccess(string, string)</code></p>"},{"location":"getting-started/#timer","title":"Timer","text":"<p>By setting up a Countdown Rule it is possible to have a device execute a specific action after a certain time runs out. This can for example be used to turn off all devices after half an hour:</p> <p><pre><code>List&lt;ICountDown&gt; cdDevices = discoveredDevices.OfType&lt;ICountDown&gt;().ToList();\ncdDevices.ForEach(d =&gt;\n    d.AddCountDownRule(\n        new CountDownRule() { \n            Delay = 1800, \n            Enabled = true, \n            PoweredOn = false, \n            Name = \"MyTimer\" \n        }\n    )\n);\n</code></pre>  Full reference for <code>CountDownRules</code></p>"},{"location":"getting-started/#schedule","title":"Schedule","text":"<p>Schedule your smart devices to automatically switch on or off if you are home or away, on sunrise or sunset or whenever you feel like. Example of turning light bulb on each workday at 07:00 in the morning. <pre><code>Schedule schedule = new Schedule\n    {\n        Name = \"MySchedule\",\n        StartAction = 1,\n        StartTime = new TimeSpan(7, 0, 0),\n        StartTimeOption = TimeOption.Custom,\n        Enabled = true,\n        Weekdays = Weekdays.WorkDays\n    };\nawait smartBulb.AddSchedule(schedule);\n</code></pre>  Full reference for <code>Schedule</code></p>"},{"location":"schedule/","title":"Schedule","text":"<p>All devices implementing <code>ISchedule</code> can perform certain actions repeatedly on a specific time. Use <code>Schedule</code> to specify the options. Schedules are executed when the time of day equals <code>StartTime</code> as long as the schedule is <code>Enabled</code>. All created schedules can be accessed via the <code>Schedules</code> property.</p> <pre><code>Schedule schedule = new Schedule\n{\n    Name = \"Test1\",\n    StartAction = 1,\n    StartTime = new TimeSpan(13, 1, 0),\n    StartTimeOption = TimeOption.Custom,\n    Enabled = true,\n    Weekdays = Weekdays.WeekendDays,\n};\nawait device.AddSchedule(schedule);\n</code></pre>"},{"location":"schedule/#options","title":"Options","text":"Property Type Description <code>Name</code> string custom name of schedule, shows in kasa app <code>Enabled</code> bool if the schedule is currently active or not <code>StartAction</code> int whether to turn device on or off at start of rule. 0 = turn off, 1 = turn on <code>StartTimeOption</code> TimeOption <code>TimeOption.Sunset</code> and  <code>TimeOption.Sunrise</code> trigger the action at, well, sunset or sunrise. Use  <code>TimeOption.Custom</code> in conjunction with <code>StartTime</code> to set your own timing <code>StartTime</code> TimeSpan time on which the action triggers when using <code>StartTimeOption = TimeOption.Custom</code> e.g. 13:05 would be <code>TimeSpan(13, 5, 0)</code> or you can specify in minutes after midnight with <code>TimeSpan.FromMinutes(785)</code> <code>Weekdays</code> Weekdays flag of days on which the schedule is executed. Combine multiple days with bitwise or - operator <code>Weekdays = Weekdays.Monday | Weekdays.Friday</code> or use preset combinations like <code>Weekdays = Weekdays.WeekendDays</code> <p>some more options are available, they are not well tested as of version 2.0.0</p>"},{"location":"schedule/#methods","title":"Methods","text":"<p><pre><code>Task ICountDown.RetrieveSchedules();\n</code></pre> queries the device for current schedules and updates <code>Schedules</code> respectively.</p> <p><pre><code>Task ICountDown.AddSchedule(Schedule);\n</code></pre> adds a new schedule</p> <p><pre><code>Task ICountDown.EditSchedule(Schedule);\n</code></pre> update an existing schedule. Example: <pre><code>device.Schedule[0].Weekdays |= Weekdays.Thursday;\nawait device.EditSchedule(Schedule[0]);\n</code></pre></p> <p><pre><code>Task ICountDown.DeleteSchedule(Schedule);\n</code></pre> deletes an existing schedule. Example: <pre><code>await device.DeleteSchedule(Schedules[0]);\n</code></pre></p> <p><pre><code>Task ICountDown.Schedules();\n</code></pre> deletes all existing schedules.</p>"},{"location":"timer/","title":"Timer","text":"<p>All Devices implementing <code>ICountDown</code> can perform certain actions after a timer runs out. Use <code>CountDownRule</code> to specify the timer options. All timers only run once, for repeated actions create a <code>Schedule</code>.  Currently active timers can be accessed via the <code>CountDownRules</code> property.</p> <pre><code>var cdr = new CountDownRule() { \n    Delay = 1800, \n    Enabled = true, \n    PoweredOn = false, \n    Name = \"MyTimer\" \n}\nawait device.AddCountDownRule(cdr);\n</code></pre>"},{"location":"timer/#options","title":"Options","text":"Property Type Description <code>Name</code> string custom name of timer, shows in kasa app <code>Enabled</code> bool if the rule is currently active or not <code>PoweredOn</code> bool if the device should be powered on or off after the timer runs out <code>Delay</code> int delay in seconds after which the action triggers"},{"location":"timer/#methods","title":"Methods","text":"<p><pre><code>Task ICountDown.RetrieveCountDownRules();\n</code></pre> queries the device for current timers and updates <code>CountDownRules</code> respectively.</p> <p><pre><code>Task ICountDown.AddCountDownRule(CountDownRule);\n</code></pre> adds a new rule</p> <p><pre><code>Task ICountDown.EditCountDownRule(CountDownRule);\n</code></pre> update an existing rule. Example: <pre><code>device.CountDownRules[0].Delay = 36000;\nawait device.EditCountDownRule(CountDownRules[0]);\n</code></pre></p> <p><pre><code>Task ICountDown.DeleteCountDownRule(CountDownRule);\n</code></pre> deletes an existing rule. Example: <pre><code>await device.DeleteCountDownRule(CountDownRules[0]);\n</code></pre></p> <p><pre><code>Task ICountDown.DeleteAllCountDownRules();\n</code></pre> deletes all existing rules.</p>"},{"location":"docs/","title":"Full API Reference","text":""},{"location":"docs/#classes","title":"Classes","text":"TPLinkSmartDevices Description <code>TPLinkDiscovery</code> handles discovery of new smart devices and connection of factory new devices to a network TPLinkSmartDevices.Devices Description <code>TPLinkSmartDevice</code> provides top-level functionalities which all smart devices use, including set up of remote access and several system information properties <code>TPLinkSmartPlug</code> encloses plug specific system information and plug controls <code>TPLinkSmartMeterPlug</code> provides data on power consumption of comsumers connected to a HS110 plug <code>TPLinkSmartBulb</code> encloses bulb specific system information and bulb controls <code>TPLinkSmartMultiPlug</code> encloses plug specific system information and controls for plugs with multiple outlets <code>TPLinkSmartDimmer</code> controls for wall switches with dimmer functionality TPLinkSmartDevices.Data Description <code>BulbHSV</code> represents a single color in the HSV color model to change a smart bulbs color <code>PowerData</code> Encapsulates JSON data structure for current energy use as metered by the HS110 Smart Energy Meter <code>LightDetails</code> Encapsulates JSON data structure for specific hardware properties of smart bulbs"},{"location":"docs/discovery/","title":"TPLinkDiscovery Class","text":"<p>Namespace: TPLinkSmartDevices handles discovery of new smart devices and connection of factory new devices to a network</p>"},{"location":"docs/discovery/#properties","title":"Properties","text":""},{"location":"docs/discovery/#discovereddevices","title":"<code>DiscoveredDevices</code>","text":"Returns a list of <code>TPLinkSmartDevice</code>'s from the latest call of <code>.Discover()</code>. This property is read-only. <pre><code>public List&lt;TPLinkSmartDevice&gt; DiscoveredDevices { get; private set; }\n</code></pre>"},{"location":"docs/discovery/#methods","title":"Methods","text":""},{"location":"docs/discovery/#discover","title":"<code>Discover(int, int, string)</code>","text":"<p>Discovers smart devices within the network of the host via UDP broadcast. Returns a list of <code>TPLinkSmartDevice</code>'s.   <pre><code>public async Task&lt;List&lt;TPLinkSmartDevice&gt;&gt; Discover(int port=9999, int timeout=5000, string target=\"255.255.255.255\")\n</code></pre></p> Parameters <ul> <li><code>int port</code>: Listen to broadcast responses on this port, defaults to <code>9999</code></li> <li><code>int timeout</code>: Timespan after which the discovery finishes, defaults to <code>5000</code>(5 seconds)</li> <li><code>string target</code>: ip address of discovery broadcast, defaults to <code>255.255.255.255</code></li> </ul> <p>Tip</p> <p>The discovery of devices within a network fails under certain circumstances. Some routers seem to block udp packets to the broadcast address (255.255.255.255), which is used to send out a discovery request. In case of using different subnet's, what seems to resolve the issue is broadcasting to the subnet's local broadcast IP (such as 192.168.0.255, if IP is 192.168.0.X with a subnet mask of 255.255.255.0)</p>"},{"location":"docs/discovery/#associatestring-string-int","title":"<code>Associate(string, string, int)</code>","text":"<p>Makes smart device connect to specified network credentials   <pre><code>public async Task Associate(string ssid, string password, int type = 3)\n</code></pre></p> Parameters <ul> <li><code>string ssid</code>: Service Set Identifier (name) of network to connect to</li> <li><code>string password</code>: password of network to connect to</li> <li><code>int type</code>: network protection level, defaults to <code>3</code> indicating WPA2</li> </ul> <p>Caution</p> <p>Host who runs the application needs to be connected to the open configuration network! (TP-Link_Smart Plug_XXXX or similar)</p>"},{"location":"docs/discovery/#events","title":"Events","text":""},{"location":"docs/discovery/#devicefound","title":"<code>DeviceFound</code>","text":"<p>Triggers when smart device is found during discovery process, granting access to all system properties of that device via the event args    <pre><code>public event EventHandler&lt;DeviceFoundEventArgs&gt; DeviceFound;\n</code></pre></p> EventArgs <ul> <li><code>DeviceFoundEventArgs e</code></li> </ul> Example <pre><code>new TPLinkDiscovery().DeviceFound += (s, e) {\n    ...\n    Console.WriteLine($\"Device found: {e.Device.Alias}\");\n    ...\n};\n</code></pre>"},{"location":"docs/data/hsv/","title":"BulbHSV Class","text":"<p>Namespace: TPLinkSmartDevices.Data represents a single color in the HSV color model to change a smart bulbs color</p>"},{"location":"docs/data/hsv/#properties","title":"Properties","text":""},{"location":"docs/data/hsv/#hue","title":"<code>Hue</code>","text":"Angular dimension representing color, <code>0\u00b0/360\u00b0</code> red, <code>120\u00b0</code> green, <code>240\u00b0</code> blue <pre><code>public int Hue { get; set; }\n</code></pre>"},{"location":"docs/data/hsv/#saturation","title":"<code>Saturation</code>","text":"Resembles various tints of color. Accepts values from 0-100. <pre><code>public int Saturation { get; set; }\n</code></pre>"},{"location":"docs/data/hsv/#value","title":"<code>Value</code>","text":"Brightness of color (mixture of hue with varying amounts of black or white paint). Accepts values from 0-100. <pre><code>public int Value { get; set; }\n</code></pre>"},{"location":"docs/data/light-details/","title":"LightDetails Class","text":"<p>Namespace: TPLinkSmartDevices.Data Encapsulates JSON data structure for specific hardware properties of smart bulbs.</p>"},{"location":"docs/data/light-details/#properties","title":"Properties","text":""},{"location":"docs/data/light-details/#colorrenderingindex","title":"<code>ColorRenderingIndex</code>","text":"Measurement of how true the color of an object looks under the bulb's light. A good CRI for most indoor residential applications is 80 or above <pre><code>public int ColorRenderingIndex { get; set; }\n</code></pre>"},{"location":"docs/data/light-details/#incandescentequivalent","title":"<code>IncandescentEquivalent</code>","text":"bulb equals a standard incandescent bulb with this watt value <pre><code>public int IncandescentEquivalent { get; set; }\n</code></pre>"},{"location":"docs/data/light-details/#lampbeamangle","title":"<code>LampBeamAngle</code>","text":"Angle at which the light is distributed or emitted <pre><code>public int LampBeamAngle { get; set; }\n</code></pre>"},{"location":"docs/data/light-details/#maxlumens","title":"<code>MaxLumens</code>","text":"maximum brightness of bulb in lumens <pre><code>public int MaxLumens { get; set; }\n</code></pre>"},{"location":"docs/data/light-details/#maxvoltage","title":"<code>MaxVoltage</code>","text":"maximum operating voltage <pre><code>public int MaxVoltage { get; set; }\n</code></pre>"},{"location":"docs/data/light-details/#minvoltage","title":"<code>MinVoltage</code>","text":"minimum operating voltage  <pre><code>public int MinVoltage { get; set; }\n</code></pre>"},{"location":"docs/data/light-details/#wattage","title":"<code>Wattage</code>","text":"energy usage of bulb in watt <pre><code>public int Wattage { get; set; }\n</code></pre>"},{"location":"docs/data/power/","title":"PowerData Class","text":"<p>Namespace: TPLinkSmartDevices.Data Encapsulates JSON data structure for current energy use as metered by the HS110 Smart Energy Meter.</p>"},{"location":"docs/data/power/#properties","title":"Properties","text":""},{"location":"docs/data/power/#voltage","title":"<code>Voltage</code>","text":"Currently measured voltage in volts <pre><code>public double Voltage { get; private set; }\n</code></pre>"},{"location":"docs/data/power/#amperage","title":"<code>Amperage</code>","text":"Currently measured current in amperes <pre><code>public double Amperage { get; private set; }\n</code></pre>"},{"location":"docs/data/power/#power","title":"<code>Power</code>","text":"Currently measured power in watts <pre><code>public double Power { get; private set; }\n</code></pre>"},{"location":"docs/data/power/#total","title":"<code>Total</code>","text":"Total power consumption in kilowatthours <pre><code>public double Total { get; private set; }\n</code></pre>"},{"location":"docs/devices/bulb/","title":"TPLinkSmartBulb Class","text":"<p>Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -&gt; TPLinkSmartBulb encloses bulb specific system information and bulb controls</p>"},{"location":"docs/devices/bulb/#properties","title":"Properties","text":""},{"location":"docs/devices/bulb/#iscolor","title":"<code>IsColor</code>","text":"Returns whether bulb supports color changes <pre><code>public bool IsColor { get; private set; }\n</code></pre>"},{"location":"docs/devices/bulb/#isdimmable","title":"<code>IsDimmable</code>","text":"Returns whether bulb supports dimming the brightness <pre><code>public bool IsDimmable { get; private set; }\n</code></pre>"},{"location":"docs/devices/bulb/#isvariablecolortemperature","title":"<code>IsVariableColorTemperature</code>","text":"Returns whether bulb supports changing of color temperature <pre><code>public bool IsVariableColorTemperature { get; private set; }\n</code></pre>"},{"location":"docs/devices/bulb/#brightness","title":"<code>Brightness</code>","text":"Returns bulb brightness in percent <pre><code>public int Brightness { get; private set; }\n</code></pre>"},{"location":"docs/devices/bulb/#colortemperature","title":"<code>ColorTemperature</code>","text":"Returns bulbs color temperature in kelvin <pre><code>public int ColorTemperature { get; private set; }\n</code></pre>"},{"location":"docs/devices/bulb/#lightdetails","title":"<code>LightDetails</code>","text":"Contains further hardware specifications of this bulb, , see <code>LightDetails</code> reference <pre><code>public LightDetails LightDetails { get; private set; }\n</code></pre>"},{"location":"docs/devices/bulb/#hsv","title":"<code>HSV</code>","text":"Returns bulb color in HSV scheme  <pre><code>public BulbHSV HSV { get; private set; }\n</code></pre>"},{"location":"docs/devices/bulb/#poweredon","title":"<code>PoweredOn</code>","text":"Returns whether bulb is powered on  <pre><code>public bool PoweredOn { get; private set; }\n</code></pre>"},{"location":"docs/devices/bulb/#preferredlightstates","title":"<code>PreferredLightStates</code>","text":"Returns collection of the four light state preset configurations <pre><code>public List&lt;PreferredLightState&gt; PreferredLightStates { get; }\n</code></pre>"},{"location":"docs/devices/bulb/#constructors","title":"Constructors","text":""},{"location":"docs/devices/bulb/#tplinksmartbulbstring-int","title":"<code>TPLinkSmartBulb(string, int)</code>","text":"<p>Creates a new object of this type, used for KL100/KL110/KL130 bulbs    <pre><code>public TPLinkSmartBulb(string hostname, int port=9999)\n</code></pre></p> Parameters <ul> <li><code>string hostname</code>: ip-address of of this bulb</li> <li><code>int port</code>: bulb communicates on this port, defaults to <code>9999</code></li> </ul>"},{"location":"docs/devices/bulb/#methods","title":"Methods","text":""},{"location":"docs/devices/bulb/#create","title":"<code>Create(string, int)</code>","text":"<p>Factory instantiation method. Returns a new instance of this type.   <pre><code>public static async Task&lt;TPLinkSmartBulb&gt; Create(string hostname, int port = 9999)\n</code></pre></p> Parameters <ul> <li><code>string hostname</code>: ip-address of of this bulb</li> <li><code>int port</code>: bulb communicates on this port, defaults to <code>9999</code></li> </ul>"},{"location":"docs/devices/bulb/#refresh","title":"<code>Refresh()</code>","text":"Refreshes all properties of this bulb (includes a call to <code>TPLinkSmartDevice.Refresh(dynamic)</code> for the common device information)   <pre><code>public async Task Refresh()\n</code></pre>"},{"location":"docs/devices/bulb/#setpoweredonbool","title":"<code>SetPoweredOn(bool)</code>","text":"<p>Change the power state of this bulb    <pre><code>public async task SetPoweredOn(bool value)\n</code></pre></p> Parameters <ul> <li><code>bool value</code>: <code>true</code> power on, <code>false</code> power off</li> </ul>"},{"location":"docs/devices/bulb/#setbrightnessint-int","title":"<code>SetBrightness(int, int)</code>","text":"<p>Change the bulbs brightness   <pre><code>public void SetBrightness(int brightness, int transition_period = 0)\n</code></pre></p> Parameters <ul> <li><code>int brightness</code>: brightness value in percent</li> <li><code>int transition_period</code> (optional): time in milliseconds in which the bulb transitions from old to new brightness. Allowed values between <code>0</code> and <code>10000</code></li> </ul> Exceptions <ul> <li><code>NotSupportedException</code>: the bulb does not support dimming</li> <li><code>ArgumentException</code>: <code>transition_period</code> only allows values between <code>0</code> and <code>10000</code></li> </ul>"},{"location":"docs/devices/bulb/#setcolortempint-int","title":"<code>SetColorTemp(int, int)</code>","text":"<p>Change the bulbs color temperature   <pre><code>public void SetColorTemp(int colortemp, int transition_period = 0)\n</code></pre></p> Parameters <ul> <li><code>int colortemp</code>: color temperature in kelvin, common values ranging between 2700K (soft light) to 6500K (bright daylight)</li> <li><code>int transition_period</code> (optional): time in milliseconds in which the bulb transitions from old to new brightness. Allowed values between <code>0</code> and <code>10000</code></li> </ul> Exceptions <ul> <li><code>NotSupportedException</code>: the bulb does not support color temperature changes</li> <li><code>ArgumentException</code>: <code>transition_period</code> only allows values between <code>0</code> and <code>10000</code></li> </ul> <p>Note</p> <p>Color temperature values depend on device model, for instance KL120 supports 2500K-5000K and KL130 2700K-9000K!</p>"},{"location":"docs/devices/bulb/#sethsv","title":"<code>SetHSV(BulbHSV, int)</code>","text":"<p>Change the bulbs color    <pre><code>public void SetHSV(BulbHSV hsv, int transition_period = 0)\n</code></pre></p> Parameters <ul> <li><code>BulbHSV hsv</code>: color in HSV color scheme, see <code>BulbHSV</code> reference</li> <li><code>int transition_period</code> (optional): time in milliseconds in which the bulb transitions from old to new brightness. Allowed values between <code>0</code> and <code>10000</code></li> </ul> Exceptions <ul> <li><code>NotSupportedException</code>: the bulb does not support color changes</li> <li><code>ArgumentException</code>: <code>transition_period</code> only allows values between <code>0</code> and <code>10000</code></li> </ul> <p>Example <pre><code>BulbHSV red = new BulbHSV { Hue = 0, Saturation = 100, Value = 100 }; // red HSV(0, 100, 100)\n\nsmartBulb.SetHSV(red);\n</code></pre></p>"},{"location":"docs/devices/bulb/#applypresetint","title":"<code>ApplyPreset(int)</code>","text":"<p>Operate smart bulb on one of the four light state presets   <pre><code>public void ApplyPreset(int presetIndex)\n</code></pre></p> Parameters <ul> <li><code>int presetIndex</code>: index of the four presets, ranging from <code>0</code> to <code>3</code></li> </ul> Exceptions <ul> <li><code>ArgumentOutOfRangeException</code>: <code>presetIndex</code> only allows values between <code>0</code> and <code>3</code></li> </ul>"},{"location":"docs/devices/device/","title":"TPLinkSmartDevice Class","text":"<p>Namespace: TPLinkSmartDevices.Devices provides top-level functionalities which all smart devices use, including set up of remote access and several system information properties</p>"},{"location":"docs/devices/device/#properties","title":"Properties","text":""},{"location":"docs/devices/device/#alias","title":"<code>Alias</code>","text":"Returns the user specified (or default) name of this device <pre><code>public string Alias { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#cloudserver","title":"<code>CloudServer</code>","text":"Returns the name of the server this device communicates to for cloud commands <pre><code>public string CloudServer { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#deviceid","title":"<code>DeviceId</code>","text":"Returns the id of this device <pre><code>public string DeviceId { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#devname","title":"<code>DevName</code>","text":"Returns the name of this device <pre><code>public string DevName { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#firmwareid","title":"<code>FirmwareId</code>","text":"Returns the firmware id of this device <pre><code>public string FirmwareId { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#hardwareid","title":"<code>HardwareId</code>","text":"Returns the hardware id of this device <pre><code>public string HardwareId { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#hardwareversion","title":"<code>HardwareVersion</code>","text":"Returns the hardware version of this device <pre><code>public string HardwareVersion { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#hostname","title":"<code>Hostname</code>","text":"Returns the ip-address of this device <pre><code>public string Hostname { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#locationlatlong","title":"<code>LocationLatLong</code>","text":"Returns the coordinates of the rough position the device is located at (location of network). <code>LocationLatLong[0]</code> is latitude, <code>LocationLatLong[1]</code> is longitude <pre><code>public double[] LocationLatLong { get; private set; }\n</code></pre> <p>Caution</p> <p>whether you find it questionable (I do!) or not, tp-link's devices collect data on position of your network. </p>"},{"location":"docs/devices/device/#macaddress","title":"<code>MacAddress</code>","text":"Returns the mac address of this device <pre><code>public string MacAddress { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#model","title":"<code>Model</code>","text":"Returns the model and region code (EU,US,UK,JP, ...) of this device <pre><code>public string Model { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#oemid","title":"<code>OemId</code>","text":"Returns the manufacturers id of this device <pre><code>public string OemId { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#port","title":"<code>Port</code>","text":"Returns the port this device communicates on <pre><code>public int Port { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#remoteaccessenabled","title":"<code>RemoteAccessEnabled</code>","text":"Returns whether this device is configured for remote access via Kasa app <pre><code>public bool RemoteAccessEnabled { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#rssi","title":"<code>RSSI</code>","text":"Returns signal strength  <pre><code>public int RSSI { get; private set; } \n</code></pre>"},{"location":"docs/devices/device/#type","title":"<code>Type</code>","text":"<pre><code>public string Type { get; private set; }\n</code></pre>"},{"location":"docs/devices/device/#methods","title":"Methods","text":""},{"location":"docs/devices/device/#configureremoteaccessstring-string","title":"<code>ConfigureRemoteAccess(string, string)</code>","text":"<p>Binds account with the specified credentials to tp-link's cloud server   <pre><code>public async Task ConfigureRemoteAccess(string username, string password)\n</code></pre></p> Parameters <ul> <li><code>string username</code>: username (e-mail address) of kasa account</li> <li><code>string password</code>: password of kasa account</li> </ul>"},{"location":"docs/devices/device/#unbindremoteaccess","title":"<code>UnbindRemoteAccess()</code>","text":"Unbinds currently connected account from tp-link's cloud server   <pre><code>public void UnbindRemoteAccess()\n</code></pre>"},{"location":"docs/devices/device/#getcloudinfo","title":"<code>GetCloudInfo()</code>","text":"Refreshes cloud information and sets <code>RemoteAccessEnabled</code> and <code>CloudServer</code> properties accordingly   <pre><code>public void GetCloudInfo()\n</code></pre>"},{"location":"docs/devices/device/#gettime","title":"<code>GetTime()</code>","text":"Returns current internal time of this device    <pre><code>public DateTime GetTime()\n</code></pre> <p>Needs Maintenance</p> <p>This method needs maintenance. It is discouraged using it due to unexpected results or errors occurring</p>"},{"location":"docs/devices/device/#refreshdynamic","title":"<code>Refresh(dynamic)</code>","text":"<p>Refreshes all properties of this device (includes a call to <code>GetCloudInfo()</code>)   <pre><code>public async Task Refresh(dynamic sysInfo = null)\n</code></pre></p> Parameters <ul> <li><code>dynamic sysInfo</code>: response of smart devices on system properties, defaults to <code>null</code> which results in a new request being made</li> </ul>"},{"location":"docs/devices/device/#setaliasstring","title":"<code>SetAlias(string)</code>","text":"<p>Sets alias of this device   <pre><code>public void SetAlias(string value)\n</code></pre></p> Parameters <ul> <li><code>string value</code>: new alias to set</li> </ul>"},{"location":"docs/devices/dimmer/","title":"TPLinkSmartDimmmer Class","text":"<p>Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -&gt; TPLinkSmartDimmer controls for wall switches with dimmer functionality </p>"},{"location":"docs/devices/dimmer/#properties","title":"Properties","text":""},{"location":"docs/devices/dimmer/#brightness","title":"<code>Brightness</code>","text":"Returns brightness (dimmer value) in percent <pre><code>public int Brightness { get; private set; }\n</code></pre>"},{"location":"docs/devices/dimmer/#options","title":"<code>Options</code>","text":"Returns an object of type <code>DimmerOptions</code> with configuration properties <pre><code>public DimmerOptions Options { get; private set; }\n</code></pre>"},{"location":"docs/devices/dimmer/#presets","title":"<code>Presets</code>","text":"Returns array of the four dimmer state preset configurations containing brightness values <pre><code>public int[] Presets { get; private set; }\n</code></pre>"},{"location":"docs/devices/dimmer/#poweredon","title":"<code>PoweredOn</code>","text":"Returns whether switch is powered on  <pre><code>public bool PoweredOn { get; private set; }\n</code></pre>"},{"location":"docs/devices/dimmer/#constructors","title":"Constructors","text":""},{"location":"docs/devices/dimmer/#tplinksmartplugstring-int-dimmeroptions","title":"<code>TPLinkSmartPlug(string, int, DimmerOptions)</code>","text":"<p>Creates a new object of this type, used for HS220 wall switch   <pre><code>public TPLinkSmartPlug(string hostname, int port=9999, DimmerOptions opts = null)\n</code></pre></p> Parameters <ul> <li><code>string hostname</code>: ip-address of this device</li> <li><code>int port</code>: device communicates on this port, defaults to <code>9999</code></li> <li><code>DimmerOptions opts</code>: configuration properties`</li> </ul>"},{"location":"docs/devices/dimmer/#methods","title":"Methods","text":""},{"location":"docs/devices/dimmer/#create","title":"<code>Create(string, int, DimmerOptions)</code>","text":"<p>Factory instantiation method. Returns a new instance of this type.   <pre><code>public static async Task&lt;TPLinkSmartPlug&gt; Create(string hostname, int port = 9999, DimmerOptions opts = null)\n</code></pre></p> Parameters <ul> <li><code>string hostname</code>: ip-address of this device</li> <li><code>int port</code>: device communicates on this port, defaults to <code>9999</code></li> <li><code>DimmerOptions opts</code>: configuration properties`</li> </ul>"},{"location":"docs/devices/dimmer/#refresh","title":"<code>Refresh()</code>","text":"Refreshes all properties of this device (includes a call to <code>TPLinkSmartDevice.Refresh(dynamic)</code> for the common device information)   <pre><code>public async Task Refresh()\n</code></pre>"},{"location":"docs/devices/dimmer/#setpoweredonbool","title":"<code>SetPoweredOn(bool)</code>","text":"<p>Change the power state    <pre><code>public void SetPoweredOn(bool value)\n</code></pre></p> Parameters <ul> <li><code>bool value</code>: <code>true</code> power on, <code>false</code> power off</li> </ul>"},{"location":"docs/devices/dimmer/#transitionbrightnessint-dimmermode-int","title":"<code>TransitionBrightness(int, DimmerMode, int)</code>","text":"<p>Transition to a specified brightness level   <pre><code>public async Task TransitionBrightness(int brightness, DimmerMode? mode = null, int? duration = null)\n</code></pre></p> Parameters <ul> <li><code>int brightness</code>: dimmer brightness value in percent</li> <li><code>DimmerMode mode</code> (optional): <code>DimmerMode</code> to use during this transition, if left empty uses default option from <code>Options.Mode</code></li> <li><code>int duration</code> (optional): time in milliseconds in which the bulb transitions from old to new brightness</li> </ul> Exceptions <ul> <li><code>ArgumentException</code>: <code>brightness</code> should be between <code>0</code> and <code>100</code></li> </ul>"},{"location":"docs/devices/dimmer/#setbrightnessint","title":"<code>SetBrightness(int)</code>","text":"<p>Instantly change to a specified brightness level   <pre><code>public async Task SetBrightness(int brightness)\n</code></pre></p> Parameters <ul> <li><code>int brightness</code>: dimmer brightness value in percent</li> </ul> Exceptions <ul> <li><code>ArgumentException</code>: <code>brightness</code> should be between <code>0</code> and <code>100</code></li> </ul>"},{"location":"docs/devices/dimmer/#setdoubleclickactiondimmermode-int","title":"<code>SetDoubleClickAction(DimmerMode, int)</code>","text":"<p>Configures change mode on double click of switch   <pre><code>public async Task SetDoubleClickAction(DimmerMode mode, int index=0)\n</code></pre></p> Parameters <ul> <li><code>DimmerMode mode</code>: <code>DimmerMode</code> to use on double clicking the switch</li> <li><code>int index</code> (optional): zero-based preset index, use in combination with <code>DimmerMode.Preset</code> to execute preset on double click</li> </ul> Exceptions <ul> <li><code>ArgumentException</code>: <code>index</code> should be between <code>0</code> and <code>3</code></li> </ul>"},{"location":"docs/devices/dimmer/#setlongpressactiondimmermode-int","title":"<code>SetLongPressAction(DimmerMode, int)</code>","text":"<p>Configures change mode on long press of switch   <pre><code>public async Task SetLongPressAction(DimmerMode mode, int index=0)\n</code></pre></p> Parameters <ul> <li><code>DimmerMode mode</code>: <code>DimmerMode</code> to use on long press of switch</li> <li><code>int index</code> (optional): zero-based preset index, use in combination with <code>DimmerMode.Preset</code> to execute preset on long press</li> </ul> Exceptions <ul> <li><code>ArgumentException</code>: <code>index</code> should be between <code>0</code> and <code>3</code></li> </ul>"},{"location":"docs/devices/dimmer/#setfadeontimeint","title":"<code>SetFadeOnTime(int)</code>","text":"<p>Configures speed of fade on transition   <pre><code>public async Task SetFadeOnTime(int fadeOnTime)\n</code></pre></p> Parameters <ul> <li><code>int fadeOnTime</code>: transition time used on next uses of switch when turning on</li> </ul> Exceptions <ul> <li><code>ArgumentException</code>: <code>fadeOnTime</code> should be a positive number</li> </ul>"},{"location":"docs/devices/dimmer/#setfadeofftimeint","title":"<code>SetFadeOffTime(int)</code>","text":"<p>Configures speed of fade on transition   <pre><code>public async Task SetFadeOffTime(int fadeOffTime)\n</code></pre></p> Parameters <ul> <li><code>int fadeOffTime</code>: transition time used on next uses of switch when turning off</li> </ul> Exceptions <ul> <li><code>ArgumentException</code>: <code>fadeOffTime</code> should be a positive number</li> </ul>"},{"location":"docs/devices/multi-plug/","title":"TPLinkSmartMultiPlug Class","text":"<p>Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -&gt; TPLinkSmartMultiPlug encloses plug specific system information and controls for plugs with multiple outlets</p>"},{"location":"docs/devices/multi-plug/#properties","title":"Properties","text":""},{"location":"docs/devices/multi-plug/#alloutletspowered","title":"<code>AllOutletsPowered</code>","text":"Returns whether all the plugs outlet relais are powered on <pre><code>public bool AllOutletsPowered { get; private set; }\n</code></pre>"},{"location":"docs/devices/multi-plug/#features","title":"<code>Features</code>","text":"Returns the feature (capability) abbreviations for this plug <pre><code>public string[] Features { get; private set; }\n</code></pre>"},{"location":"docs/devices/multi-plug/#ledon","title":"<code>LedOn</code>","text":"If status led on smart plug is on  <pre><code>public bool LedOn { get; private set; }\n</code></pre>"},{"location":"docs/devices/multi-plug/#outletcount","title":"<code>OutletCount</code>","text":"Returns number of outlets on this plug <pre><code>public int OutletCount { get; private set; }\n</code></pre>"},{"location":"docs/devices/multi-plug/#outlets","title":"<code>Outlets</code>","text":"Returns array of Outlets, containing id's, names and power states of each outlet <pre><code>public Outlet[] Outlets { get; private set; }\n</code></pre>"},{"location":"docs/devices/multi-plug/#constructors","title":"Constructors","text":""},{"location":"docs/devices/multi-plug/#tplinksmartmultiplugstring-int","title":"<code>TPLinkSmartMultiPlug(string, int)</code>","text":"<p>Creates a new object of this type, used for HS300/HS107 plug    <pre><code>public TPLinkSmartPlug(string hostname, int port=9999)\n</code></pre></p> Parameters <ul> <li><code>string hostname</code>: ip-address of of this plug</li> <li><code>int port</code>: plug communicates on this port, defaults to <code>9999</code></li> </ul>"},{"location":"docs/devices/multi-plug/#methods","title":"Methods","text":""},{"location":"docs/devices/multi-plug/#refresh","title":"<code>Refresh()</code>","text":"Refreshes all properties of this plug (includes a call to <code>TPLinkSmartDevice.Refresh(dynamic)</code> for the common device information)   <pre><code>public async Task Refresh()\n</code></pre>"},{"location":"docs/devices/multi-plug/#setoutletpoweredbool-int","title":"<code>SetOutletPowered(bool, int)</code>","text":"<p>Change the plugs outlet relay state   <pre><code>public void SetOutletPowered(bool value, int outledId = -1)\n</code></pre></p> Parameters <ul> <li><code>bool value</code>: <code>true</code> power on, <code>false</code> power off</li> <li><code>int outledId</code>: id of outlet to turn on/off (zero-based index of all outlets)</li> </ul> Exceptions <ul> <li><code>ArgumentException</code>: plug does not have a outlet with specified <code>outledId</code></li> </ul>"},{"location":"docs/devices/multi-plug/#setledonbool","title":"<code>SetLedOn(bool)</code>","text":"<p>Change the plugs LED state; branded as night mode by tp-link :)   <pre><code>public void SetLedOn(bool value)\n</code></pre></p> Parameters <ul> <li><code>bool value</code>: <code>true</code> LED on (day mode), <code>false</code> LED off (night mode)</li> </ul>"},{"location":"docs/devices/plug/","title":"TPLinkSmartPlug Class","text":"<p>Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartDevice -&gt; TPLinkSmartPlug encloses plug specific system information and plug controls</p>"},{"location":"docs/devices/plug/#properties","title":"Properties","text":""},{"location":"docs/devices/plug/#features","title":"<code>Features</code>","text":"Returns the feature (capability) abbreviations for this plug <pre><code>public string[] Features { get; private set; }\n</code></pre>"},{"location":"docs/devices/plug/#ledon","title":"<code>LedOn</code>","text":"If status led on smart plug is on  <pre><code>public bool LedOn { get; private set; }\n</code></pre>"},{"location":"docs/devices/plug/#outletpowered","title":"<code>OutletPowered</code>","text":"Returns whether the plugs outlet relay is powered on <pre><code>public bool OutletPowered { get; private set; }\n</code></pre>"},{"location":"docs/devices/plug/#poweredonsince","title":"<code>PoweredOnSince</code>","text":"Returns <code>DateTime</code> the relay was powered on <pre><code>public DateTime PoweredOnSince { get; private set; }\n</code></pre>"},{"location":"docs/devices/plug/#constructors","title":"Constructors","text":""},{"location":"docs/devices/plug/#tplinksmartplugstring-int","title":"<code>TPLinkSmartPlug(string, int)</code>","text":"<p>Creates a new object of this type, used for HS100/HS105 plug    <pre><code>public TPLinkSmartPlug(string hostname, int port=9999)\n</code></pre></p> Parameters <ul> <li><code>string hostname</code>: ip-address of of this plug</li> <li><code>int port</code>: plug communicates on this port, defaults to <code>9999</code></li> </ul>"},{"location":"docs/devices/plug/#methods","title":"Methods","text":""},{"location":"docs/devices/plug/#create","title":"<code>Create(string, int)</code>","text":"<p>Factory instantiation method. Returns a new instance of this type.   <pre><code>public static async Task&lt;TPLinkSmartPlug&gt; Create(string hostname, int port = 9999)\n</code></pre></p> Parameters <ul> <li><code>string hostname</code>: ip-address of of this plug</li> <li><code>int port</code>: plug communicates on this port, defaults to <code>9999</code></li> </ul>"},{"location":"docs/devices/plug/#refresh","title":"<code>Refresh()</code>","text":"Refreshes all properties of this plug (includes a call to <code>TPLinkSmartDevice.Refresh(dynamic)</code> for the common device information)   <pre><code>public async Task Refresh()\n</code></pre>"},{"location":"docs/devices/plug/#power","title":"<code>SetPoweredOn(bool)</code>","text":"<p>Change the plugs outlet relay state   <pre><code>public async Task SetPoweredOn(bool value)\n</code></pre></p> Parameters <ul> <li><code>bool value</code>: <code>true</code> power on, <code>false</code> power off</li> </ul>"},{"location":"docs/devices/plug/#setledonbool","title":"<code>SetLedOn(bool)</code>","text":"<p>Change the plugs LED state; branded as night mode by tp-link :)   <pre><code>public void SetLedOn(bool value)\n</code></pre></p> Parameters <ul> <li><code>bool value</code>: <code>true</code> LED on (day mode), <code>false</code> LED off (night mode)</li> </ul>"},{"location":"docs/devices/smartmeter-plug/","title":"TPLinkSmartMeterPlug Class","text":"<p>Namespace: TPLinkSmartDevices.Devices Inheritance: TPLinkSmartPlug -&gt; TPLinkSmartMeterPlug provides data on power consumption of comsumers connected to a HS110 plug</p>"},{"location":"docs/devices/smartmeter-plug/#properties","title":"Properties","text":""},{"location":"docs/devices/smartmeter-plug/#currentpowerusage","title":"<code>CurrentPowerUsage</code>","text":"Returns a <code>PowerData</code> object including power usage data from the latest call to the construtor or <code>.Refresh()</code> <pre><code>public PowerData CurrentPowerUsage { get; private set; }\n</code></pre>"},{"location":"docs/devices/smartmeter-plug/#igain","title":"<code>IGain</code>","text":"Returns ratio of output current to input current. <pre><code>public uint IGain { get; private set; }\n</code></pre>"},{"location":"docs/devices/smartmeter-plug/#vgain","title":"<code>VGain</code>","text":"Returns ratio of output voltage to input voltage. <pre><code>public uint VGain { get; private set; }\n</code></pre>"},{"location":"docs/devices/smartmeter-plug/#constructors","title":"Constructors","text":""},{"location":"docs/devices/smartmeter-plug/#tplinksmartmeterplugstring","title":"<code>TPLinkSmartMeterPlug(string)</code>","text":"<p>Creates a new object of this type, used for HS110 plug    <pre><code>public TPLinkSmartMeterPlug(string hostname)\n</code></pre></p> Parameters <ul> <li><code>string hostname</code>: ip-address of of this plug</li> </ul>"},{"location":"docs/devices/smartmeter-plug/#methods","title":"Methods","text":""},{"location":"docs/devices/smartmeter-plug/#create","title":"<code>Create(string, int)</code>","text":"<p>Factory instantiation method. Returns a new instance of this type.   <pre><code>public static async Task&lt;TPLinkSmartMeterPlug&gt; Create(string hostname, int port = 9999)\n</code></pre></p> Parameters <ul> <li><code>string hostname</code>: ip-address of of this plug</li> <li><code>int port</code>: plug communicates on this port, defaults to <code>9999</code></li> </ul>"},{"location":"docs/devices/smartmeter-plug/#refresh","title":"<code>Refresh()</code>","text":"Updates current power usage, gain data and all other properties of this plug (includes a call to <code>TPLinkSmartPlug.Refresh()</code> for the common device information)   <pre><code>public async Task Refresh()\n</code></pre>"},{"location":"docs/devices/smartmeter-plug/#erasestats","title":"<code>EraseStats()</code>","text":"Erases all collected e-meter statistics of this plug   <pre><code>public void EraseStats()\n</code></pre>"},{"location":"docs/devices/smartmeter-plug/#getmonthstatsdatetime-float","title":"<code>GetMonthStats(DateTime, float)</code>","text":"<p>Queries collected usage statistics from a specific month. Returns a <code>Dictionary&lt;DateTime, float&gt;</code> of each day in a month and energy consumption of that day in kWh)   <pre><code>public async Task&lt;Dictionary&lt;DateTime, float&gt;&gt; GetMonthStats(int month, int year)\n</code></pre></p> Parameters <ul> <li><code>int month</code>: month of year, ranging from <code>1</code>(January) to <code>12</code>(December)</li> <li><code>int year</code>: </li> </ul>"},{"location":"docs/devices/smartmeter-plug/#getyearstatsint-float","title":"<code>GetYearStats(int, float)</code>","text":"<p>Queries collected usage statistics for a whole year. Returns a <code>Dictionary&lt;int, float&gt;</code> of each month and energy consumption of that month in kWh)   <pre><code>public async Task&lt;Dictionary&lt;int, float&gt;&gt; GetYearStats(int year)\n</code></pre></p> Parameters <ul> <li><code>int year</code>: </li> </ul>"}]}